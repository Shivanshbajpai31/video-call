{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\nimport { getBackend } from '@tensorflow/tfjs-core';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nfunction __generator(thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Takes the sigmoid of the part heatmap output and generates a 2d one-hot\n * tensor with ones where the part's score has the maximum value.\n *\n * @param partHeatmapScores\n */\nfunction toFlattenedOneHotPartMap(partHeatmapScores) {\n  var numParts = partHeatmapScores.shape[2];\n  var partMapLocations = tf.argMax(partHeatmapScores, 2);\n  var partMapFlattened = tf.reshape(partMapLocations, [-1]);\n  return tf.oneHot(partMapFlattened, numParts);\n}\nfunction clipByMask2d(image, mask) {\n  return tf.mul(image, mask);\n}\n/**\n * Takes the sigmoid of the segmentation output, and generates a segmentation\n * mask with a 1 or 0 at each pixel where there is a person or not a person. The\n * segmentation threshold determines the threshold of a score for a pixel for it\n * to be considered part of a person.\n * @param segmentScores A 3d-tensor of the sigmoid of the segmentation output.\n * @param segmentationThreshold The minimum that segmentation values must have\n * to be considered part of the person.  Affects the generation of the\n * segmentation mask and the clipping of the colored part image.\n *\n * @returns A segmentation mask with a 1 or 0 at each pixel where there is a\n * person or not a person.\n */\nfunction toMaskTensor(segmentScores, threshold) {\n  return tf.tidy(function () {\n    return tf.cast(tf.greater(segmentScores, tf.scalar(threshold)), 'int32');\n  });\n}\n/**\n * Takes the sigmoid of the person and part map output, and returns a 2d tensor\n * of an image with the corresponding value at each pixel corresponding to the\n * part with the highest value. These part ids are clipped by the segmentation\n * mask. Wherever the a pixel is clipped by the segmentation mask, its value\n * will set to -1, indicating that there is no part in that pixel.\n * @param segmentScores A 3d-tensor of the sigmoid of the segmentation output.\n * @param partHeatmapScores A 3d-tensor of the sigmoid of the part heatmap\n * output. The third dimension corresponds to the part.\n *\n * @returns A 2d tensor of an image with the corresponding value at each pixel\n * corresponding to the part with the highest value. These part ids are clipped\n * by the segmentation mask.  It will have values of -1 for pixels that are\n * outside of the body and do not have a corresponding part.\n */\nfunction decodePartSegmentation(segmentationMask, partHeatmapScores) {\n  var _a = partHeatmapScores.shape,\n    partMapHeight = _a[0],\n    partMapWidth = _a[1],\n    numParts = _a[2];\n  return tf.tidy(function () {\n    var flattenedMap = toFlattenedOneHotPartMap(partHeatmapScores);\n    var partNumbers = tf.expandDims(tf.range(0, numParts, 1, 'int32'), 1);\n    var partMapFlattened = tf.cast(tf.matMul(flattenedMap, partNumbers), 'int32');\n    var partMap = tf.reshape(partMapFlattened, [partMapHeight, partMapWidth]);\n    var partMapShiftedUpForClipping = tf.add(partMap, tf.scalar(1, 'int32'));\n    return tf.sub(clipByMask2d(partMapShiftedUpForClipping, segmentationMask), tf.scalar(1, 'int32'));\n  });\n}\nfunction decodeOnlyPartSegmentation(partHeatmapScores) {\n  var _a = partHeatmapScores.shape,\n    partMapHeight = _a[0],\n    partMapWidth = _a[1],\n    numParts = _a[2];\n  return tf.tidy(function () {\n    var flattenedMap = toFlattenedOneHotPartMap(partHeatmapScores);\n    var partNumbers = tf.expandDims(tf.range(0, numParts, 1, 'int32'), 1);\n    var partMapFlattened = tf.cast(tf.matMul(flattenedMap, partNumbers), 'int32');\n    return tf.reshape(partMapFlattened, [partMapHeight, partMapWidth]);\n  });\n}\n\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * BodyPix supports using various convolution neural network models\n * (e.g. ResNet and MobileNetV1) as its underlying base model.\n * The following BaseModel interface defines a unified interface for\n * creating such BodyPix base models. Currently both MobileNet (in\n * ./mobilenet.ts) and ResNet (in ./resnet.ts) implements the BaseModel\n * interface. New base models that conform to the BaseModel interface can be\n * added to BodyPix.\n */\nvar BaseModel = /** @class */function () {\n  function BaseModel(model, outputStride) {\n    this.model = model;\n    this.outputStride = outputStride;\n    var inputShape = this.model.inputs[0].shape;\n    tf.util.assert(inputShape[1] === -1 && inputShape[2] === -1, function () {\n      return \"Input shape [\".concat(inputShape[1], \", \").concat(inputShape[2], \"] \") + \"must both be equal to or -1\";\n    });\n  }\n  /**\n   * Predicts intermediate Tensor representations.\n   *\n   * @param input The input RGB image of the base model.\n   * A Tensor of shape: [`inputResolution`, `inputResolution`, 3].\n   *\n   * @return A dictionary of base model's intermediate predictions.\n   * The returned dictionary should contains the following elements:\n   * - heatmapScores: A Tensor3D that represents the keypoint heatmap scores.\n   * - offsets: A Tensor3D that represents the offsets.\n   * - displacementFwd: A Tensor3D that represents the forward displacement.\n   * - displacementBwd: A Tensor3D that represents the backward displacement.\n   * - segmentation: A Tensor3D that represents the segmentation of all\n   * people.\n   * - longOffsets: A Tensor3D that represents the long offsets used for\n   * instance grouping.\n   * - partHeatmaps: A Tensor3D that represents the body part segmentation.\n   */\n  BaseModel.prototype.predict = function (input) {\n    var _this = this;\n    return tf.tidy(function () {\n      var asFloat = _this.preprocessInput(tf.cast(input, 'float32'));\n      var asBatch = tf.expandDims(asFloat, 0);\n      var results = _this.model.predict(asBatch);\n      var results3d = results.map(function (y) {\n        return tf.squeeze(y, [0]);\n      });\n      var namedResults = _this.nameOutputResults(results3d);\n      return {\n        heatmapScores: tf.sigmoid(namedResults.heatmap),\n        offsets: namedResults.offsets,\n        displacementFwd: namedResults.displacementFwd,\n        displacementBwd: namedResults.displacementBwd,\n        segmentation: namedResults.segmentation,\n        partHeatmaps: namedResults.partHeatmaps,\n        longOffsets: namedResults.longOffsets,\n        partOffsets: namedResults.partOffsets\n      };\n    });\n  };\n  /**\n   * Releases the CPU and GPU memory allocated by the model.\n   */\n  BaseModel.prototype.dispose = function () {\n    this.model.dispose();\n  };\n  return BaseModel;\n}();\n\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar MobileNet = /** @class */function (_super) {\n  __extends(MobileNet, _super);\n  function MobileNet() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  MobileNet.prototype.preprocessInput = function (input) {\n    // Normalize the pixels [0, 255] to be between [-1, 1].\n    return tf.tidy(function () {\n      return tf.sub(tf.div(input, 127.5), 1.0);\n    });\n  };\n  MobileNet.prototype.nameOutputResults = function (results) {\n    var offsets = results[0],\n      segmentation = results[1],\n      partHeatmaps = results[2],\n      longOffsets = results[3],\n      heatmap = results[4],\n      displacementFwd = results[5],\n      displacementBwd = results[6],\n      partOffsets = results[7];\n    return {\n      offsets: offsets,\n      segmentation: segmentation,\n      partHeatmaps: partHeatmaps,\n      longOffsets: longOffsets,\n      heatmap: heatmap,\n      displacementFwd: displacementFwd,\n      displacementBwd: displacementBwd,\n      partOffsets: partOffsets\n    };\n  };\n  return MobileNet;\n}(BaseModel);\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar PART_NAMES = ['nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder', 'rightShoulder', 'leftElbow', 'rightElbow', 'leftWrist', 'rightWrist', 'leftHip', 'rightHip', 'leftKnee', 'rightKnee', 'leftAnkle', 'rightAnkle'];\nvar NUM_KEYPOINTS = PART_NAMES.length;\nvar PART_IDS = PART_NAMES.reduce(function (result, jointName, i) {\n  result[jointName] = i;\n  return result;\n}, {});\nvar CONNECTED_PART_NAMES = [['leftHip', 'leftShoulder'], ['leftElbow', 'leftShoulder'], ['leftElbow', 'leftWrist'], ['leftHip', 'leftKnee'], ['leftKnee', 'leftAnkle'], ['rightHip', 'rightShoulder'], ['rightElbow', 'rightShoulder'], ['rightElbow', 'rightWrist'], ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle'], ['leftShoulder', 'rightShoulder'], ['leftHip', 'rightHip']];\n/*\n * Define the skeleton. This defines the parent->child relationships of our\n * tree. Arbitrarily this defines the nose as the root of the tree, however\n * since we will infer the displacement for both parent->child and\n * child->parent, we can define the tree root as any node.\n */\nvar POSE_CHAIN = [['nose', 'leftEye'], ['leftEye', 'leftEar'], ['nose', 'rightEye'], ['rightEye', 'rightEar'], ['nose', 'leftShoulder'], ['leftShoulder', 'leftElbow'], ['leftElbow', 'leftWrist'], ['leftShoulder', 'leftHip'], ['leftHip', 'leftKnee'], ['leftKnee', 'leftAnkle'], ['nose', 'rightShoulder'], ['rightShoulder', 'rightElbow'], ['rightElbow', 'rightWrist'], ['rightShoulder', 'rightHip'], ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle']];\nCONNECTED_PART_NAMES.map(function (_a) {\n  var jointNameA = _a[0],\n    jointNameB = _a[1];\n  return [PART_IDS[jointNameA], PART_IDS[jointNameB]];\n});\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nfunction getScale(_a, _b, padding) {\n  var height = _a[0],\n    width = _a[1];\n  var inputResolutionY = _b[0],\n    inputResolutionX = _b[1];\n  var padT = padding.top,\n    padB = padding.bottom,\n    padL = padding.left,\n    padR = padding.right;\n  var scaleY = inputResolutionY / (padT + padB + height);\n  var scaleX = inputResolutionX / (padL + padR + width);\n  return [scaleX, scaleY];\n}\nfunction getOffsetPoint(y, x, keypoint, offsets) {\n  return {\n    y: offsets.get(y, x, keypoint),\n    x: offsets.get(y, x, keypoint + NUM_KEYPOINTS)\n  };\n}\nfunction getImageCoords(part, outputStride, offsets) {\n  var heatmapY = part.heatmapY,\n    heatmapX = part.heatmapX,\n    keypoint = part.id;\n  var _a = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets),\n    y = _a.y,\n    x = _a.x;\n  return {\n    x: part.heatmapX * outputStride + x,\n    y: part.heatmapY * outputStride + y\n  };\n}\nfunction clamp(a, min, max) {\n  if (a < min) {\n    return min;\n  }\n  if (a > max) {\n    return max;\n  }\n  return a;\n}\nfunction squaredDistance(y1, x1, y2, x2) {\n  var dy = y2 - y1;\n  var dx = x2 - x1;\n  return dy * dy + dx * dx;\n}\nfunction addVectors(a, b) {\n  return {\n    x: a.x + b.x,\n    y: a.y + b.y\n  };\n}\n\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nfunction computeDistance(embedding, pose, minPartScore) {\n  if (minPartScore === void 0) {\n    minPartScore = 0.3;\n  }\n  var distance = 0.0;\n  var numKpt = 0;\n  for (var p = 0; p < embedding.length; p++) {\n    if (pose.keypoints[p].score > minPartScore) {\n      numKpt += 1;\n      distance += Math.pow(embedding[p].x - pose.keypoints[p].position.x, 2) + Math.pow(embedding[p].y - pose.keypoints[p].position.y, 2);\n    }\n  }\n  if (numKpt === 0) {\n    distance = Infinity;\n  } else {\n    distance = distance / numKpt;\n  }\n  return distance;\n}\nfunction convertToPositionInOuput(position, _a, _b, stride) {\n  var padT = _a[0],\n    padL = _a[1];\n  var scaleX = _b[0],\n    scaleY = _b[1];\n  var y = Math.round(((padT + position.y + 1.0) * scaleY - 1.0) / stride);\n  var x = Math.round(((padL + position.x + 1.0) * scaleX - 1.0) / stride);\n  return {\n    x: x,\n    y: y\n  };\n}\nfunction getEmbedding(location, keypointIndex, convertToPosition, outputResolutionX, longOffsets, refineSteps, _a) {\n  var height = _a[0],\n    width = _a[1];\n  var newLocation = convertToPosition(location);\n  var nn = newLocation.y * outputResolutionX + newLocation.x;\n  var dy = longOffsets[NUM_KEYPOINTS * (2 * nn) + keypointIndex];\n  var dx = longOffsets[NUM_KEYPOINTS * (2 * nn + 1) + keypointIndex];\n  var y = location.y + dy;\n  var x = location.x + dx;\n  for (var t = 0; t < refineSteps; t++) {\n    y = Math.min(y, height - 1);\n    x = Math.min(x, width - 1);\n    var newPos = convertToPosition({\n      x: x,\n      y: y\n    });\n    var nn_1 = newPos.y * outputResolutionX + newPos.x;\n    dy = longOffsets[NUM_KEYPOINTS * (2 * nn_1) + keypointIndex];\n    dx = longOffsets[NUM_KEYPOINTS * (2 * nn_1 + 1) + keypointIndex];\n    y = y + dy;\n    x = x + dx;\n  }\n  return {\n    x: x,\n    y: y\n  };\n}\nfunction matchEmbeddingToInstance(location, longOffsets, poses, numKptForMatching, _a, _b, outputResolutionX, _c, stride, refineSteps) {\n  var padT = _a[0],\n    padL = _a[1];\n  var scaleX = _b[0],\n    scaleY = _b[1];\n  var height = _c[0],\n    width = _c[1];\n  var embed = [];\n  var convertToPosition = function (pair) {\n    return convertToPositionInOuput(pair, [padT, padL], [scaleX, scaleY], stride);\n  };\n  for (var keypointsIndex = 0; keypointsIndex < numKptForMatching; keypointsIndex++) {\n    var embedding = getEmbedding(location, keypointsIndex, convertToPosition, outputResolutionX, longOffsets, refineSteps, [height, width]);\n    embed.push(embedding);\n  }\n  var kMin = -1;\n  var kMinDist = Infinity;\n  for (var k = 0; k < poses.length; k++) {\n    var dist = computeDistance(embed, poses[k]);\n    if (dist < kMinDist) {\n      kMin = k;\n      kMinDist = dist;\n    }\n  }\n  return kMin;\n}\nfunction getOutputResolution(_a, stride) {\n  var inputResolutionY = _a[0],\n    inputResolutionX = _a[1];\n  var outputResolutionX = Math.round((inputResolutionX - 1.0) / stride + 1.0);\n  var outputResolutionY = Math.round((inputResolutionY - 1.0) / stride + 1.0);\n  return [outputResolutionX, outputResolutionY];\n}\nfunction decodeMultipleMasksCPU(segmentation, longOffsets, posesAboveScore, height, width, stride, _a, padding, refineSteps, numKptForMatching) {\n  var inHeight = _a[0],\n    inWidth = _a[1];\n  if (numKptForMatching === void 0) {\n    numKptForMatching = 5;\n  }\n  var dataArrays = posesAboveScore.map(function (x) {\n    return new Uint8Array(height * width).fill(0);\n  });\n  var padT = padding.top,\n    padL = padding.left;\n  var _b = getScale([height, width], [inHeight, inWidth], padding),\n    scaleX = _b[0],\n    scaleY = _b[1];\n  var outputResolutionX = getOutputResolution([inHeight, inWidth], stride)[0];\n  for (var i = 0; i < height; i += 1) {\n    for (var j = 0; j < width; j += 1) {\n      var n = i * width + j;\n      var prob = segmentation[n];\n      if (prob === 1) {\n        var kMin = matchEmbeddingToInstance({\n          x: j,\n          y: i\n        }, longOffsets, posesAboveScore, numKptForMatching, [padT, padL], [scaleX, scaleY], outputResolutionX, [height, width], stride, refineSteps);\n        if (kMin >= 0) {\n          dataArrays[kMin][n] = 1;\n        }\n      }\n    }\n  }\n  return dataArrays;\n}\nfunction decodeMultiplePartMasksCPU(segmentation, longOffsets, partSegmentaion, posesAboveScore, height, width, stride, _a, padding, refineSteps, numKptForMatching) {\n  var inHeight = _a[0],\n    inWidth = _a[1];\n  if (numKptForMatching === void 0) {\n    numKptForMatching = 5;\n  }\n  var dataArrays = posesAboveScore.map(function (x) {\n    return new Int32Array(height * width).fill(-1);\n  });\n  var padT = padding.top,\n    padL = padding.left;\n  var _b = getScale([height, width], [inHeight, inWidth], padding),\n    scaleX = _b[0],\n    scaleY = _b[1];\n  var outputResolutionX = getOutputResolution([inHeight, inWidth], stride)[0];\n  for (var i = 0; i < height; i += 1) {\n    for (var j = 0; j < width; j += 1) {\n      var n = i * width + j;\n      var prob = segmentation[n];\n      if (prob === 1) {\n        var kMin = matchEmbeddingToInstance({\n          x: j,\n          y: i\n        }, longOffsets, posesAboveScore, numKptForMatching, [padT, padL], [scaleX, scaleY], outputResolutionX, [height, width], stride, refineSteps);\n        if (kMin >= 0) {\n          dataArrays[kMin][n] = partSegmentaion[n];\n        }\n      }\n    }\n  }\n  return dataArrays;\n}\n\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nfunction decodeMultipleMasksWebGl(segmentation, longOffsets, posesAboveScore, height, width, stride, _a, padding, refineSteps, minKptScore, maxNumPeople) {\n  var inHeight = _a[0],\n    inWidth = _a[1];\n  // The height/width of the image/canvas itself.\n  var _b = segmentation.shape,\n    origHeight = _b[0],\n    origWidth = _b[1];\n  // The height/width of the output of the model.\n  var _c = longOffsets.shape.slice(0, 2),\n    outHeight = _c[0],\n    outWidth = _c[1];\n  var shapedLongOffsets = tf.reshape(longOffsets, [outHeight, outWidth, 2, NUM_KEYPOINTS]);\n  // Make pose tensor of shape [MAX_NUM_PEOPLE, NUM_KEYPOINTS, 3] where\n  // the last 3 coordinates correspond to the score, h and w coordinate of that\n  // keypoint.\n  var poseVals = new Float32Array(maxNumPeople * NUM_KEYPOINTS * 3).fill(0.0);\n  for (var i = 0; i < posesAboveScore.length; i++) {\n    var poseOffset = i * NUM_KEYPOINTS * 3;\n    var pose = posesAboveScore[i];\n    for (var kp = 0; kp < NUM_KEYPOINTS; kp++) {\n      var keypoint = pose.keypoints[kp];\n      var offset = poseOffset + kp * 3;\n      poseVals[offset] = keypoint.score;\n      poseVals[offset + 1] = keypoint.position.y;\n      poseVals[offset + 2] = keypoint.position.x;\n    }\n  }\n  var _d = getScale([height, width], [inHeight, inWidth], padding),\n    scaleX = _d[0],\n    scaleY = _d[1];\n  var posesTensor = tf.tensor(poseVals, [maxNumPeople, NUM_KEYPOINTS, 3]);\n  var padT = padding.top,\n    padL = padding.left;\n  var program = {\n    variableNames: ['segmentation', 'longOffsets', 'poses'],\n    outputShape: [origHeight, origWidth],\n    userCode: \"\\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\\n    }\\n\\n    float convertToPositionInOutputFloat(\\n        int pos, int pad, float scale, int stride) {\\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\\n    }\\n\\n    float dist(float x1, float y1, float x2, float y2) {\\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\\n    }\\n\\n    float sampleLongOffsets(float h, float w, int d, int k) {\\n      float fh = fract(h);\\n      float fw = fract(w);\\n      int clH = int(ceil(h));\\n      int clW = int(ceil(w));\\n      int flH = int(floor(h));\\n      int flW = int(floor(w));\\n      float o11 = getLongOffsets(flH, flW, d, k);\\n      float o12 = getLongOffsets(flH, clW, d, k);\\n      float o21 = getLongOffsets(clH, flW, d, k);\\n      float o22 = getLongOffsets(clH, clW, d, k);\\n      float o1 = mix(o11, o12, fw);\\n      float o2 = mix(o21, o22, fw);\\n      return mix(o1, o2, fh);\\n    }\\n\\n    int findNearestPose(int h, int w) {\\n      float prob = getSegmentation(h, w);\\n      if (prob < 1.0) {\\n        return -1;\\n      }\\n\\n      // Done(Tyler): convert from output space h/w to strided space.\\n      float stridedH = convertToPositionInOutputFloat(\\n        h, \".concat(padT, \", \").concat(scaleY, \", \").concat(stride, \");\\n      float stridedW = convertToPositionInOutputFloat(\\n        w, \").concat(padL, \", \").concat(scaleX, \", \").concat(stride, \");\\n\\n      float minDist = 1000000.0;\\n      int iMin = -1;\\n      for (int i = 0; i < \").concat(maxNumPeople, \"; i++) {\\n        float curDistSum = 0.0;\\n        int numKpt = 0;\\n        for (int k = 0; k < \").concat(NUM_KEYPOINTS, \"; k++) {\\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\\n\\n          float y = float(h) + dy;\\n          float x = float(w) + dx;\\n\\n          for (int s = 0; s < \").concat(refineSteps, \"; s++) {\\n            int yRounded = round(min(y, float(\").concat(height - 1.0, \")));\\n            int xRounded = round(min(x, float(\").concat(width - 1.0, \")));\\n\\n            float yStrided = convertToPositionInOutputFloat(\\n              yRounded, \").concat(padT, \", \").concat(scaleY, \", \").concat(stride, \");\\n            float xStrided = convertToPositionInOutputFloat(\\n              xRounded, \").concat(padL, \", \").concat(scaleX, \", \").concat(stride, \");\\n\\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\\n\\n            y = y + dy;\\n            x = x + dx;\\n          }\\n\\n          float poseScore = getPoses(i, k, 0);\\n          float poseY = getPoses(i, k, 1);\\n          float poseX = getPoses(i, k, 2);\\n          if (poseScore > \").concat(minKptScore, \") {\\n            numKpt = numKpt + 1;\\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\\n          }\\n        }\\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\\n          minDist = curDistSum / float(numKpt);\\n          iMin = i;\\n        }\\n      }\\n      return iMin;\\n    }\\n\\n    void main() {\\n        ivec2 coords = getOutputCoords();\\n        int nearestPose = findNearestPose(coords[0], coords[1]);\\n        setOutput(float(nearestPose));\\n      }\\n  \")\n  };\n  var webglBackend = tf.backend();\n  return webglBackend.compileAndRun(program, [segmentation, shapedLongOffsets, posesTensor]);\n}\n\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nfunction toPersonKSegmentation(segmentation, k) {\n  return tf.tidy(function () {\n    return tf.cast(tf.equal(segmentation, tf.scalar(k)), 'int32');\n  });\n}\nfunction toPersonKPartSegmentation(segmentation, bodyParts, k) {\n  return tf.tidy(function () {\n    return tf.sub(tf.mul(tf.cast(tf.equal(segmentation, tf.scalar(k)), 'int32'), tf.add(bodyParts, 1)), 1);\n  });\n}\nfunction isWebGlBackend() {\n  return getBackend() === 'webgl';\n}\nfunction decodePersonInstanceMasks(segmentation, longOffsets, poses, height, width, stride, _a, padding, minPoseScore, refineSteps, minKeypointScore, maxNumPeople) {\n  var inHeight = _a[0],\n    inWidth = _a[1];\n  if (minPoseScore === void 0) {\n    minPoseScore = 0.2;\n  }\n  if (refineSteps === void 0) {\n    refineSteps = 8;\n  }\n  if (minKeypointScore === void 0) {\n    minKeypointScore = 0.3;\n  }\n  if (maxNumPeople === void 0) {\n    maxNumPeople = 10;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var posesAboveScore, personSegmentationsData, personSegmentations, segmentationsData, longOffsetsData;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          posesAboveScore = poses.filter(function (pose) {\n            return pose.score >= minPoseScore;\n          });\n          if (!isWebGlBackend()) return [3 /*break*/, 2];\n          personSegmentations = tf.tidy(function () {\n            var masksTensorInfo = decodeMultipleMasksWebGl(segmentation, longOffsets, posesAboveScore, height, width, stride, [inHeight, inWidth], padding, refineSteps, minKeypointScore, maxNumPeople);\n            var masksTensor = tf.engine().makeTensorFromDataId(masksTensorInfo.dataId, masksTensorInfo.shape, masksTensorInfo.dtype);\n            return posesAboveScore.map(function (_, k) {\n              return toPersonKSegmentation(masksTensor, k);\n            });\n          });\n          return [4 /*yield*/, Promise.all(personSegmentations.map(function (mask) {\n            return mask.data();\n          }))];\n        case 1:\n          personSegmentationsData = _b.sent();\n          personSegmentations.forEach(function (x) {\n            return x.dispose();\n          });\n          return [3 /*break*/, 5];\n        case 2:\n          return [4 /*yield*/, segmentation.data()];\n        case 3:\n          segmentationsData = _b.sent();\n          return [4 /*yield*/, longOffsets.data()];\n        case 4:\n          longOffsetsData = _b.sent();\n          personSegmentationsData = decodeMultipleMasksCPU(segmentationsData, longOffsetsData, posesAboveScore, height, width, stride, [inHeight, inWidth], padding, refineSteps);\n          _b.label = 5;\n        case 5:\n          return [2 /*return*/, personSegmentationsData.map(function (data, i) {\n            return {\n              data: data,\n              pose: posesAboveScore[i],\n              width: width,\n              height: height\n            };\n          })];\n      }\n    });\n  });\n}\nfunction decodePersonInstancePartMasks(segmentation, longOffsets, partSegmentation, poses, height, width, stride, _a, padding, minPoseScore, refineSteps, minKeypointScore, maxNumPeople) {\n  var inHeight = _a[0],\n    inWidth = _a[1];\n  if (minPoseScore === void 0) {\n    minPoseScore = 0.2;\n  }\n  if (refineSteps === void 0) {\n    refineSteps = 8;\n  }\n  if (minKeypointScore === void 0) {\n    minKeypointScore = 0.3;\n  }\n  if (maxNumPeople === void 0) {\n    maxNumPeople = 10;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var posesAboveScore, partSegmentationsByPersonData, partSegmentations, segmentationsData, longOffsetsData, partSegmentaionData;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          posesAboveScore = poses.filter(function (pose) {\n            return pose.score >= minPoseScore;\n          });\n          if (!isWebGlBackend()) return [3 /*break*/, 2];\n          partSegmentations = tf.tidy(function () {\n            var masksTensorInfo = decodeMultipleMasksWebGl(segmentation, longOffsets, posesAboveScore, height, width, stride, [inHeight, inWidth], padding, refineSteps, minKeypointScore, maxNumPeople);\n            var masksTensor = tf.engine().makeTensorFromDataId(masksTensorInfo.dataId, masksTensorInfo.shape, masksTensorInfo.dtype);\n            return posesAboveScore.map(function (_, k) {\n              return toPersonKPartSegmentation(masksTensor, partSegmentation, k);\n            });\n          });\n          return [4 /*yield*/, Promise.all(partSegmentations.map(function (x) {\n            return x.data();\n          }))];\n        case 1:\n          partSegmentationsByPersonData = _b.sent();\n          partSegmentations.forEach(function (x) {\n            return x.dispose();\n          });\n          return [3 /*break*/, 6];\n        case 2:\n          return [4 /*yield*/, segmentation.data()];\n        case 3:\n          segmentationsData = _b.sent();\n          return [4 /*yield*/, longOffsets.data()];\n        case 4:\n          longOffsetsData = _b.sent();\n          return [4 /*yield*/, partSegmentation.data()];\n        case 5:\n          partSegmentaionData = _b.sent();\n          partSegmentationsByPersonData = decodeMultiplePartMasksCPU(segmentationsData, longOffsetsData, partSegmentaionData, posesAboveScore, height, width, stride, [inHeight, inWidth], padding, refineSteps);\n          _b.label = 6;\n        case 6:\n          return [2 /*return*/, partSegmentationsByPersonData.map(function (data, k) {\n            return {\n              pose: posesAboveScore[k],\n              data: data,\n              height: height,\n              width: width\n            };\n          })];\n      }\n    });\n  });\n}\n\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// algorithm based on Coursera Lecture from Algorithms, Part 1:\n// https://www.coursera.org/learn/algorithms-part1/lecture/ZjoSM/heapsort\nfunction half(k) {\n  return Math.floor(k / 2);\n}\nvar MaxHeap = /** @class */function () {\n  function MaxHeap(maxSize, getElementValue) {\n    this.priorityQueue = new Array(maxSize);\n    this.numberOfElements = -1;\n    this.getElementValue = getElementValue;\n  }\n  MaxHeap.prototype.enqueue = function (x) {\n    this.priorityQueue[++this.numberOfElements] = x;\n    this.swim(this.numberOfElements);\n  };\n  MaxHeap.prototype.dequeue = function () {\n    var max = this.priorityQueue[0];\n    this.exchange(0, this.numberOfElements--);\n    this.sink(0);\n    this.priorityQueue[this.numberOfElements + 1] = null;\n    return max;\n  };\n  MaxHeap.prototype.empty = function () {\n    return this.numberOfElements === -1;\n  };\n  MaxHeap.prototype.size = function () {\n    return this.numberOfElements + 1;\n  };\n  MaxHeap.prototype.all = function () {\n    return this.priorityQueue.slice(0, this.numberOfElements + 1);\n  };\n  MaxHeap.prototype.max = function () {\n    return this.priorityQueue[0];\n  };\n  MaxHeap.prototype.swim = function (k) {\n    while (k > 0 && this.less(half(k), k)) {\n      this.exchange(k, half(k));\n      k = half(k);\n    }\n  };\n  MaxHeap.prototype.sink = function (k) {\n    while (2 * k <= this.numberOfElements) {\n      var j = 2 * k;\n      if (j < this.numberOfElements && this.less(j, j + 1)) {\n        j++;\n      }\n      if (!this.less(k, j)) {\n        break;\n      }\n      this.exchange(k, j);\n      k = j;\n    }\n  };\n  MaxHeap.prototype.getValueAt = function (i) {\n    return this.getElementValue(this.priorityQueue[i]);\n  };\n  MaxHeap.prototype.less = function (i, j) {\n    return this.getValueAt(i) < this.getValueAt(j);\n  };\n  MaxHeap.prototype.exchange = function (i, j) {\n    var t = this.priorityQueue[i];\n    this.priorityQueue[i] = this.priorityQueue[j];\n    this.priorityQueue[j] = t;\n  };\n  return MaxHeap;\n}();\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nfunction scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, localMaximumRadius, scores) {\n  var _a = scores.shape,\n    height = _a[0],\n    width = _a[1];\n  var localMaximum = true;\n  var yStart = Math.max(heatmapY - localMaximumRadius, 0);\n  var yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\n  for (var yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\n    var xStart = Math.max(heatmapX - localMaximumRadius, 0);\n    var xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\n    for (var xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\n      if (scores.get(yCurrent, xCurrent, keypointId) > score) {\n        localMaximum = false;\n        break;\n      }\n    }\n    if (!localMaximum) {\n      break;\n    }\n  }\n  return localMaximum;\n}\n/**\n * Builds a priority queue with part candidate positions for a specific image in\n * the batch. For this we find all local maxima in the score maps with score\n * values above a threshold. We create a single priority queue across all parts.\n */\nfunction buildPartWithScoreQueue(scoreThreshold, localMaximumRadius, scores) {\n  var _a = scores.shape,\n    height = _a[0],\n    width = _a[1],\n    numKeypoints = _a[2];\n  var queue = new MaxHeap(height * width * numKeypoints, function (_a) {\n    var score = _a.score;\n    return score;\n  });\n  for (var heatmapY = 0; heatmapY < height; ++heatmapY) {\n    for (var heatmapX = 0; heatmapX < width; ++heatmapX) {\n      for (var keypointId = 0; keypointId < numKeypoints; ++keypointId) {\n        var score = scores.get(heatmapY, heatmapX, keypointId);\n        // Only consider parts with score greater or equal to threshold as\n        // root candidates.\n        if (score < scoreThreshold) {\n          continue;\n        }\n        // Only consider keypoints whose score is maximum in a local window.\n        if (scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, localMaximumRadius, scores)) {\n          queue.enqueue({\n            score: score,\n            part: {\n              heatmapY: heatmapY,\n              heatmapX: heatmapX,\n              id: keypointId\n            }\n          });\n        }\n      }\n    }\n  }\n  return queue;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar parentChildrenTuples = POSE_CHAIN.map(function (_a) {\n  var parentJoinName = _a[0],\n    childJoinName = _a[1];\n  return [PART_IDS[parentJoinName], PART_IDS[childJoinName]];\n});\nvar parentToChildEdges = parentChildrenTuples.map(function (_a) {\n  var childJointId = _a[1];\n  return childJointId;\n});\nvar childToParentEdges = parentChildrenTuples.map(function (_a) {\n  var parentJointId = _a[0];\n  return parentJointId;\n});\nfunction getDisplacement(edgeId, point, displacements) {\n  var numEdges = displacements.shape[2] / 2;\n  return {\n    y: displacements.get(point.y, point.x, edgeId),\n    x: displacements.get(point.y, point.x, numEdges + edgeId)\n  };\n}\nfunction getStridedIndexNearPoint(point, outputStride, height, width) {\n  return {\n    y: clamp(Math.round(point.y / outputStride), 0, height - 1),\n    x: clamp(Math.round(point.x / outputStride), 0, width - 1)\n  };\n}\n/**\n * We get a new keypoint along the `edgeId` for the pose instance, assuming\n * that the position of the `idSource` part is already known. For this, we\n * follow the displacement vector from the source to target part (stored in\n * the `i`-t channel of the displacement tensor). The displaced keypoint\n * vector is refined using the offset vector by `offsetRefineStep` times.\n */\nfunction traverseToTargetKeypoint(edgeId, sourceKeypoint, targetKeypointId, scoresBuffer, offsets, outputStride, displacements, offsetRefineStep) {\n  if (offsetRefineStep === void 0) {\n    offsetRefineStep = 2;\n  }\n  var _a = scoresBuffer.shape,\n    height = _a[0],\n    width = _a[1];\n  // Nearest neighbor interpolation for the source->target displacements.\n  var sourceKeypointIndices = getStridedIndexNearPoint(sourceKeypoint.position, outputStride, height, width);\n  var displacement = getDisplacement(edgeId, sourceKeypointIndices, displacements);\n  var displacedPoint = addVectors(sourceKeypoint.position, displacement);\n  var targetKeypoint = displacedPoint;\n  for (var i = 0; i < offsetRefineStep; i++) {\n    var targetKeypointIndices = getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n    var offsetPoint = getOffsetPoint(targetKeypointIndices.y, targetKeypointIndices.x, targetKeypointId, offsets);\n    targetKeypoint = addVectors({\n      x: targetKeypointIndices.x * outputStride,\n      y: targetKeypointIndices.y * outputStride\n    }, {\n      x: offsetPoint.x,\n      y: offsetPoint.y\n    });\n  }\n  var targetKeyPointIndices = getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n  var score = scoresBuffer.get(targetKeyPointIndices.y, targetKeyPointIndices.x, targetKeypointId);\n  return {\n    position: targetKeypoint,\n    part: PART_NAMES[targetKeypointId],\n    score: score\n  };\n}\n/**\n * Follows the displacement fields to decode the full pose of the object\n * instance given the position of a part that acts as root.\n *\n * @return An array of decoded keypoints and their scores for a single pose\n */\nfunction decodePose(root, scores, offsets, outputStride, displacementsFwd, displacementsBwd) {\n  var numParts = scores.shape[2];\n  var numEdges = parentToChildEdges.length;\n  var instanceKeypoints = new Array(numParts);\n  // Start a new detection instance at the position of the root.\n  var rootPart = root.part,\n    rootScore = root.score;\n  var rootPoint = getImageCoords(rootPart, outputStride, offsets);\n  instanceKeypoints[rootPart.id] = {\n    score: rootScore,\n    part: PART_NAMES[rootPart.id],\n    position: rootPoint\n  };\n  // Decode the part positions upwards in the tree, following the backward\n  // displacements.\n  for (var edge = numEdges - 1; edge >= 0; --edge) {\n    var sourceKeypointId = parentToChildEdges[edge];\n    var targetKeypointId = childToParentEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] && !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores, offsets, outputStride, displacementsBwd);\n    }\n  }\n  // Decode the part positions downwards in the tree, following the forward\n  // displacements.\n  for (var edge = 0; edge < numEdges; ++edge) {\n    var sourceKeypointId = childToParentEdges[edge];\n    var targetKeypointId = parentToChildEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] && !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores, offsets, outputStride, displacementsFwd);\n    }\n  }\n  return instanceKeypoints;\n}\n\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nfunction withinNmsRadiusOfCorrespondingPoint(poses, squaredNmsRadius, _a, keypointId) {\n  var x = _a.x,\n    y = _a.y;\n  return poses.some(function (_a) {\n    var keypoints = _a.keypoints;\n    var correspondingKeypoint = keypoints[keypointId].position;\n    return squaredDistance(y, x, correspondingKeypoint.y, correspondingKeypoint.x) <= squaredNmsRadius;\n  });\n}\n/* Score the newly proposed object instance without taking into account\n * the scores of the parts that overlap with any previously detected\n * instance.\n */\nfunction getInstanceScore(existingPoses, squaredNmsRadius, instanceKeypoints) {\n  var notOverlappedKeypointScores = instanceKeypoints.reduce(function (result, _a, keypointId) {\n    var position = _a.position,\n      score = _a.score;\n    if (!withinNmsRadiusOfCorrespondingPoint(existingPoses, squaredNmsRadius, position, keypointId)) {\n      result += score;\n    }\n    return result;\n  }, 0.0);\n  return notOverlappedKeypointScores /= instanceKeypoints.length;\n}\n// A point (y, x) is considered as root part candidate if its score is a\n// maximum in a window |y - y'| <= kLocalMaximumRadius, |x - x'| <=\n// kLocalMaximumRadius.\nvar kLocalMaximumRadius = 1;\n/**\n * Detects multiple poses and finds their parts from part scores and\n * displacement vectors. It returns up to `maxDetections` object instance\n * detections in decreasing root score order. It works as follows: We first\n * create a priority queue with local part score maxima above\n * `scoreThreshold`, considering all parts at the same time. Then we\n * iteratively pull the top  element of the queue (in decreasing score order)\n * and treat it as a root candidate for a new object instance. To avoid\n * duplicate detections, we reject the root candidate if it is within a disk\n * of `nmsRadius` pixels from the corresponding part of a previously detected\n * instance, which is a form of part-based non-maximum suppression (NMS). If\n * the root candidate passes the NMS check, we start a new object instance\n * detection, treating the corresponding part as root and finding the\n * positions of the remaining parts by following the displacement vectors\n * along the tree-structured part graph. We assign to the newly detected\n * instance a score equal to the sum of scores of its parts which have not\n * been claimed by a previous instance (i.e., those at least `nmsRadius`\n * pixels away from the corresponding part of all previously detected\n * instances), divided by the total number of parts `numParts`.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param displacementsFwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the forward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param displacementsBwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the backward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @param maxPoseDetections Maximum number of returned instance detections per\n * image.\n *\n * @param scoreThreshold Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5.\n *\n * @param nmsRadius Non-maximum suppression part distance. It needs to be\n * strictly positive. Two parts suppress each other if they are less than\n * `nmsRadius` pixels away. Defaults to 20.\n *\n * @return An array of poses and their scores, each containing keypoints and\n * the corresponding keypoint scores.\n */\nfunction decodeMultiplePoses(scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, outputStride, maxPoseDetections, scoreThreshold, nmsRadius) {\n  if (scoreThreshold === void 0) {\n    scoreThreshold = 0.5;\n  }\n  if (nmsRadius === void 0) {\n    nmsRadius = 20;\n  }\n  var poses = [];\n  var queue = buildPartWithScoreQueue(scoreThreshold, kLocalMaximumRadius, scoresBuffer);\n  var squaredNmsRadius = nmsRadius * nmsRadius;\n  // Generate at most maxDetections object instances per image in\n  // decreasing root part score order.\n  while (poses.length < maxPoseDetections && !queue.empty()) {\n    // The top element in the queue is the next root candidate.\n    var root = queue.dequeue();\n    // Part-based non-maximum suppression: We reject a root candidate if it\n    // is within a disk of `nmsRadius` pixels from the corresponding part of\n    // a previously detected instance.\n    var rootImageCoords = getImageCoords(root.part, outputStride, offsetsBuffer);\n    if (withinNmsRadiusOfCorrespondingPoint(poses, squaredNmsRadius, rootImageCoords, root.part.id)) {\n      continue;\n    }\n    // Start a new detection instance at the position of the root.\n    var keypoints = decodePose(root, scoresBuffer, offsetsBuffer, outputStride, displacementsFwdBuffer, displacementsBwdBuffer);\n    var score = getInstanceScore(poses, squaredNmsRadius, keypoints);\n    poses.push({\n      keypoints: keypoints,\n      score: score\n    });\n  }\n  return poses;\n}\n\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar imageNetMean = [-123.15, -115.90, -103.06];\nvar ResNet = /** @class */function (_super) {\n  __extends(ResNet, _super);\n  function ResNet() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ResNet.prototype.preprocessInput = function (input) {\n    return tf.add(input, imageNetMean);\n  };\n  ResNet.prototype.nameOutputResults = function (results) {\n    var displacementBwd = results[0],\n      displacementFwd = results[1],\n      heatmap = results[2],\n      longOffsets = results[3],\n      offsets = results[4],\n      partHeatmaps = results[5],\n      segmentation = results[6],\n      partOffsets = results[7];\n    return {\n      offsets: offsets,\n      segmentation: segmentation,\n      partHeatmaps: partHeatmaps,\n      longOffsets: longOffsets,\n      heatmap: heatmap,\n      displacementFwd: displacementFwd,\n      displacementBwd: displacementBwd,\n      partOffsets: partOffsets\n    };\n  };\n  return ResNet;\n}(BaseModel);\n\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar RESNET50_BASE_URL = 'https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/resnet50/';\nvar MOBILENET_BASE_URL = 'https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/mobilenet/';\n// The BodyPix 2.0 ResNet50 models use the latest TensorFlow.js 1.0 model\n// format.\nfunction resNet50SavedModel(stride, quantBytes) {\n  var graphJson = \"model-stride\".concat(stride, \".json\");\n  // quantBytes=4 corresponding to the non-quantized full-precision SavedModel.\n  if (quantBytes === 4) {\n    return RESNET50_BASE_URL + \"float/\" + graphJson;\n  } else {\n    return RESNET50_BASE_URL + \"quant\".concat(quantBytes, \"/\") + graphJson;\n  }\n}\n// The BodyPix 2.0 MobileNetV1 models use the latest TensorFlow.js 1.0 model\n// format.\nfunction mobileNetSavedModel(stride, multiplier, quantBytes) {\n  var toStr = {\n    1.0: '100',\n    0.75: '075',\n    0.50: '050'\n  };\n  var graphJson = \"model-stride\".concat(stride, \".json\");\n  // quantBytes=4 corresponding to the non-quantized full-precision SavedModel.\n  if (quantBytes === 4) {\n    return MOBILENET_BASE_URL + \"float/\".concat(toStr[multiplier], \"/\") + graphJson;\n  } else {\n    return MOBILENET_BASE_URL + \"quant\".concat(quantBytes, \"/\").concat(toStr[multiplier], \"/\") + graphJson;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nvar _a;\nfunction getSizeFromImageLikeElement(input) {\n  if ('offsetHeight' in input && input.offsetHeight !== 0 && 'offsetWidth' in input && input.offsetWidth !== 0) {\n    return [input.offsetHeight, input.offsetWidth];\n  } else if (input.height != null && input.width != null) {\n    return [input.height, input.width];\n  } else {\n    throw new Error(\"HTMLImageElement must have height and width attributes set.\");\n  }\n}\nfunction getSizeFromVideoElement(input) {\n  if (input.hasAttribute('height') && input.hasAttribute('width')) {\n    // Prioritizes user specified height and width.\n    // We can't test the .height and .width properties directly,\n    // because they evaluate to 0 if unset.\n    return [input.height, input.width];\n  } else {\n    return [input.videoHeight, input.videoWidth];\n  }\n}\nfunction getInputSize(input) {\n  if (typeof HTMLCanvasElement !== 'undefined' && input instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && input instanceof OffscreenCanvas || typeof HTMLImageElement !== 'undefined' && input instanceof HTMLImageElement) {\n    return getSizeFromImageLikeElement(input);\n  } else if (typeof ImageData !== 'undefined' && input instanceof ImageData) {\n    return [input.height, input.width];\n  } else if (typeof HTMLVideoElement !== 'undefined' && input instanceof HTMLVideoElement) {\n    return getSizeFromVideoElement(input);\n  } else if (input instanceof tf.Tensor) {\n    return [input.shape[0], input.shape[1]];\n  } else {\n    throw new Error(\"error: Unknown input type: \".concat(input, \".\"));\n  }\n}\nfunction isValidInputResolution(resolution, outputStride) {\n  return (resolution - 1) % outputStride === 0;\n}\nfunction toValidInputResolution(inputResolution, outputStride) {\n  if (isValidInputResolution(inputResolution, outputStride)) {\n    return inputResolution;\n  }\n  return Math.floor(inputResolution / outputStride) * outputStride + 1;\n}\nvar INTERNAL_RESOLUTION_STRING_OPTIONS = {\n  low: 'low',\n  medium: 'medium',\n  high: 'high',\n  full: 'full'\n};\nvar INTERNAL_RESOLUTION_PERCENTAGES = (_a = {}, _a[INTERNAL_RESOLUTION_STRING_OPTIONS.low] = 0.25, _a[INTERNAL_RESOLUTION_STRING_OPTIONS.medium] = 0.5, _a[INTERNAL_RESOLUTION_STRING_OPTIONS.high] = 0.75, _a[INTERNAL_RESOLUTION_STRING_OPTIONS.full] = 1.0, _a);\nvar MIN_INTERNAL_RESOLUTION = 0.1;\nvar MAX_INTERNAL_RESOLUTION = 2.0;\nfunction toInternalResolutionPercentage(internalResolution) {\n  if (typeof internalResolution === 'string') {\n    var result = INTERNAL_RESOLUTION_PERCENTAGES[internalResolution];\n    tf.util.assert(typeof result === 'number', function () {\n      return \"string value of inputResolution must be one of \".concat(Object.values(INTERNAL_RESOLUTION_STRING_OPTIONS).join(','), \" but was \").concat(internalResolution, \".\");\n    });\n    return result;\n  } else {\n    tf.util.assert(typeof internalResolution === 'number' && internalResolution <= MAX_INTERNAL_RESOLUTION && internalResolution >= MIN_INTERNAL_RESOLUTION, function () {\n      return \"inputResolution must be a string or number between \".concat(MIN_INTERNAL_RESOLUTION, \" and \").concat(MAX_INTERNAL_RESOLUTION, \", but \") + \"was \".concat(internalResolution);\n    });\n    return internalResolution;\n  }\n}\nfunction toInputResolutionHeightAndWidth(internalResolution, outputStride, _a) {\n  var inputHeight = _a[0],\n    inputWidth = _a[1];\n  var internalResolutionPercentage = toInternalResolutionPercentage(internalResolution);\n  return [toValidInputResolution(inputHeight * internalResolutionPercentage, outputStride), toValidInputResolution(inputWidth * internalResolutionPercentage, outputStride)];\n}\nfunction toInputTensor(input) {\n  // TODO: tf.browser.fromPixels types to support OffscreenCanvas\n  // @ts-ignore\n  return input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\n}\nfunction resizeAndPadTo(imageTensor, _a, flipHorizontal) {\n  var targetH = _a[0],\n    targetW = _a[1];\n  if (flipHorizontal === void 0) {\n    flipHorizontal = false;\n  }\n  var _b = imageTensor.shape,\n    height = _b[0],\n    width = _b[1];\n  var targetAspect = targetW / targetH;\n  var aspect = width / height;\n  var resizeW;\n  var resizeH;\n  var padL;\n  var padR;\n  var padT;\n  var padB;\n  if (aspect > targetAspect) {\n    // resize to have the larger dimension match the shape.\n    resizeW = targetW;\n    resizeH = Math.ceil(resizeW / aspect);\n    var padHeight = targetH - resizeH;\n    padL = 0;\n    padR = 0;\n    padT = Math.floor(padHeight / 2);\n    padB = targetH - (resizeH + padT);\n  } else {\n    resizeH = targetH;\n    resizeW = Math.ceil(targetH * aspect);\n    var padWidth = targetW - resizeW;\n    padL = Math.floor(padWidth / 2);\n    padR = targetW - (resizeW + padL);\n    padT = 0;\n    padB = 0;\n  }\n  var resizedAndPadded = tf.tidy(function () {\n    // resize to have largest dimension match image\n    var resized;\n    if (flipHorizontal) {\n      resized = tf.image.resizeBilinear(tf.reverse(imageTensor, 1), [resizeH, resizeW]);\n    } else {\n      resized = tf.image.resizeBilinear(imageTensor, [resizeH, resizeW]);\n    }\n    var padded = tf.pad3d(resized, [[padT, padB], [padL, padR], [0, 0]]);\n    return padded;\n  });\n  return {\n    resizedAndPadded: resizedAndPadded,\n    paddedBy: [[padT, padB], [padL, padR]]\n  };\n}\nfunction scaleAndCropToInputTensorShape(tensor, _a, _b, _c, applySigmoidActivation) {\n  var inputTensorHeight = _a[0],\n    inputTensorWidth = _a[1];\n  var resizedAndPaddedHeight = _b[0],\n    resizedAndPaddedWidth = _b[1];\n  var _d = _c[0],\n    padT = _d[0],\n    padB = _d[1],\n    _e = _c[1],\n    padL = _e[0],\n    padR = _e[1];\n  if (applySigmoidActivation === void 0) {\n    applySigmoidActivation = false;\n  }\n  return tf.tidy(function () {\n    var inResizedAndPadded = tf.image.resizeBilinear(tensor, [resizedAndPaddedHeight, resizedAndPaddedWidth], true);\n    if (applySigmoidActivation) {\n      inResizedAndPadded = tf.sigmoid(inResizedAndPadded);\n    }\n    return removePaddingAndResizeBack(inResizedAndPadded, [inputTensorHeight, inputTensorWidth], [[padT, padB], [padL, padR]]);\n  });\n}\nfunction removePaddingAndResizeBack(resizedAndPadded, _a, _b) {\n  var originalHeight = _a[0],\n    originalWidth = _a[1];\n  var _c = _b[0],\n    padT = _c[0],\n    padB = _c[1],\n    _d = _b[1],\n    padL = _d[0],\n    padR = _d[1];\n  return tf.tidy(function () {\n    var batchedImage = tf.expandDims(resizedAndPadded);\n    return tf.squeeze(tf.image.cropAndResize(batchedImage, [[padT / (originalHeight + padT + padB - 1.0), padL / (originalWidth + padL + padR - 1.0), (padT + originalHeight - 1.0) / (originalHeight + padT + padB - 1.0), (padL + originalWidth - 1.0) / (originalWidth + padL + padR - 1.0)]], [0], [originalHeight, originalWidth]), [0]);\n  });\n}\nfunction padAndResizeTo(input, _a) {\n  var targetH = _a[0],\n    targetW = _a[1];\n  var _b = getInputSize(input),\n    height = _b[0],\n    width = _b[1];\n  var targetAspect = targetW / targetH;\n  var aspect = width / height;\n  var _c = [0, 0, 0, 0],\n    padT = _c[0],\n    padB = _c[1],\n    padL = _c[2],\n    padR = _c[3];\n  if (aspect < targetAspect) {\n    // pads the width\n    padT = 0;\n    padB = 0;\n    padL = Math.round(0.5 * (targetAspect * height - width));\n    padR = Math.round(0.5 * (targetAspect * height - width));\n  } else {\n    // pads the height\n    padT = Math.round(0.5 * (1.0 / targetAspect * width - height));\n    padB = Math.round(0.5 * (1.0 / targetAspect * width - height));\n    padL = 0;\n    padR = 0;\n  }\n  var resized = tf.tidy(function () {\n    var imageTensor = toInputTensor(input);\n    imageTensor = tf.pad3d(imageTensor, [[padT, padB], [padL, padR], [0, 0]]);\n    return tf.image.resizeBilinear(imageTensor, [targetH, targetW]);\n  });\n  return {\n    resized: resized,\n    padding: {\n      top: padT,\n      left: padL,\n      right: padR,\n      bottom: padB\n    }\n  };\n}\nfunction toTensorBuffers3D(tensors) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2 /*return*/, Promise.all(tensors.map(function (tensor) {\n        return tensor.buffer();\n      }))];\n    });\n  });\n}\nfunction scalePose(pose, scaleY, scaleX, offsetY, offsetX) {\n  if (offsetY === void 0) {\n    offsetY = 0;\n  }\n  if (offsetX === void 0) {\n    offsetX = 0;\n  }\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(function (_a) {\n      var score = _a.score,\n        part = _a.part,\n        position = _a.position;\n      return {\n        score: score,\n        part: part,\n        position: {\n          x: position.x * scaleX + offsetX,\n          y: position.y * scaleY + offsetY\n        }\n      };\n    })\n  };\n}\nfunction scalePoses(poses, scaleY, scaleX, offsetY, offsetX) {\n  if (offsetY === void 0) {\n    offsetY = 0;\n  }\n  if (offsetX === void 0) {\n    offsetX = 0;\n  }\n  if (scaleX === 1 && scaleY === 1 && offsetY === 0 && offsetX === 0) {\n    return poses;\n  }\n  return poses.map(function (pose) {\n    return scalePose(pose, scaleY, scaleX, offsetY, offsetX);\n  });\n}\nfunction flipPoseHorizontal(pose, imageWidth) {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(function (_a) {\n      var score = _a.score,\n        part = _a.part,\n        position = _a.position;\n      return {\n        score: score,\n        part: part,\n        position: {\n          x: imageWidth - 1 - position.x,\n          y: position.y\n        }\n      };\n    })\n  };\n}\nfunction flipPosesHorizontal(poses, imageWidth) {\n  if (imageWidth <= 0) {\n    return poses;\n  }\n  return poses.map(function (pose) {\n    return flipPoseHorizontal(pose, imageWidth);\n  });\n}\nfunction scaleAndFlipPoses(poses, _a, _b, padding, flipHorizontal) {\n  var height = _a[0],\n    width = _a[1];\n  var inputResolutionHeight = _b[0],\n    inputResolutionWidth = _b[1];\n  var scaleY = (height + padding.top + padding.bottom) / inputResolutionHeight;\n  var scaleX = (width + padding.left + padding.right) / inputResolutionWidth;\n  var scaledPoses = scalePoses(poses, scaleY, scaleX, -padding.top, -padding.left);\n  if (flipHorizontal) {\n    return flipPosesHorizontal(scaledPoses, width);\n  } else {\n    return scaledPoses;\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar APPLY_SIGMOID_ACTIVATION = true;\nvar FLIP_POSES_AFTER_SCALING = false;\n// The default configuration for loading MobileNetV1 based BodyPix.\n//\n// (And for references, the default configuration for loading ResNet\n// based PoseNet is also included).\n//\n// ```\n// const RESNET_CONFIG = {\n//   architecture: 'ResNet50',\n//   outputStride: 32,\n//   quantBytes: 4,\n// } as ModelConfig;\n// ```\nvar MOBILENET_V1_CONFIG = {\n  architecture: 'MobileNetV1',\n  outputStride: 16,\n  quantBytes: 4,\n  multiplier: 0.75\n};\nvar VALID_ARCHITECTURE = ['MobileNetV1', 'ResNet50'];\nvar VALID_STRIDE = {\n  'MobileNetV1': [8, 16, 32],\n  'ResNet50': [32, 16]\n};\nvar VALID_MULTIPLIER = {\n  'MobileNetV1': [0.50, 0.75, 1.0],\n  'ResNet50': [1.0]\n};\nvar VALID_QUANT_BYTES = [1, 2, 4];\nfunction validateModelConfig(config) {\n  config = config || MOBILENET_V1_CONFIG;\n  if (config.architecture == null) {\n    config.architecture = 'MobileNetV1';\n  }\n  if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\n    throw new Error(\"Invalid architecture \".concat(config.architecture, \". \") + \"Should be one of \".concat(VALID_ARCHITECTURE));\n  }\n  if (config.outputStride == null) {\n    config.outputStride = 16;\n  }\n  if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\n    throw new Error(\"Invalid outputStride \".concat(config.outputStride, \". \") + \"Should be one of \".concat(VALID_STRIDE[config.architecture], \" \") + \"for architecture \".concat(config.architecture, \".\"));\n  }\n  if (config.multiplier == null) {\n    config.multiplier = 1.0;\n  }\n  if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\n    throw new Error(\"Invalid multiplier \".concat(config.multiplier, \". \") + \"Should be one of \".concat(VALID_MULTIPLIER[config.architecture], \" \") + \"for architecture \".concat(config.architecture, \".\"));\n  }\n  if (config.quantBytes == null) {\n    config.quantBytes = 4;\n  }\n  if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\n    throw new Error(\"Invalid quantBytes \".concat(config.quantBytes, \". \") + \"Should be one of \".concat(VALID_QUANT_BYTES, \" \") + \"for architecture \".concat(config.architecture, \".\"));\n  }\n  return config;\n}\nvar PERSON_INFERENCE_CONFIG = {\n  flipHorizontal: false,\n  internalResolution: 'medium',\n  segmentationThreshold: 0.7,\n  maxDetections: 10,\n  scoreThreshold: 0.4,\n  nmsRadius: 20\n};\nvar MULTI_PERSON_INSTANCE_INFERENCE_CONFIG = {\n  flipHorizontal: false,\n  internalResolution: 'medium',\n  segmentationThreshold: 0.7,\n  maxDetections: 10,\n  scoreThreshold: 0.4,\n  nmsRadius: 20,\n  minKeypointScore: 0.3,\n  refineSteps: 10\n};\nfunction validatePersonInferenceConfig(config) {\n  var segmentationThreshold = config.segmentationThreshold,\n    maxDetections = config.maxDetections,\n    scoreThreshold = config.scoreThreshold,\n    nmsRadius = config.nmsRadius;\n  if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\n    throw new Error(\"segmentationThreshold \".concat(segmentationThreshold, \". \") + \"Should be in range [0.0, 1.0]\");\n  }\n  if (maxDetections <= 0) {\n    throw new Error(\"Invalid maxDetections \".concat(maxDetections, \". \") + \"Should be > 0\");\n  }\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n    throw new Error(\"Invalid scoreThreshold \".concat(scoreThreshold, \". \") + \"Should be in range [0.0, 1.0]\");\n  }\n  if (nmsRadius <= 0) {\n    throw new Error(\"Invalid nmsRadius \".concat(nmsRadius, \".\"));\n  }\n}\nfunction validateMultiPersonInstanceInferenceConfig(config) {\n  var segmentationThreshold = config.segmentationThreshold,\n    maxDetections = config.maxDetections,\n    scoreThreshold = config.scoreThreshold,\n    nmsRadius = config.nmsRadius,\n    minKeypointScore = config.minKeypointScore,\n    refineSteps = config.refineSteps;\n  if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\n    throw new Error(\"segmentationThreshold \".concat(segmentationThreshold, \". \") + \"Should be in range [0.0, 1.0]\");\n  }\n  if (maxDetections <= 0) {\n    throw new Error(\"Invalid maxDetections \".concat(maxDetections, \". \") + \"Should be > 0\");\n  }\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n    throw new Error(\"Invalid scoreThreshold \".concat(scoreThreshold, \". \") + \"Should be in range [0.0, 1.0]\");\n  }\n  if (nmsRadius <= 0) {\n    throw new Error(\"Invalid nmsRadius \".concat(nmsRadius, \".\"));\n  }\n  if (minKeypointScore < 0 || minKeypointScore > 1) {\n    throw new Error(\"Invalid minKeypointScore \".concat(minKeypointScore, \".\") + \"Should be in range [0.0, 1.0]\");\n  }\n  if (refineSteps <= 0 || refineSteps > 20) {\n    throw new Error(\"Invalid refineSteps \".concat(refineSteps, \".\") + \"Should be in range [1, 20]\");\n  }\n}\nvar BodyPix = /** @class */function () {\n  function BodyPix(net) {\n    this.baseModel = net;\n  }\n  BodyPix.prototype.predictForPersonSegmentation = function (input) {\n    var _a = this.baseModel.predict(input),\n      segmentation = _a.segmentation,\n      heatmapScores = _a.heatmapScores,\n      offsets = _a.offsets,\n      displacementFwd = _a.displacementFwd,\n      displacementBwd = _a.displacementBwd;\n    return {\n      segmentLogits: segmentation,\n      heatmapScores: heatmapScores,\n      offsets: offsets,\n      displacementFwd: displacementFwd,\n      displacementBwd: displacementBwd\n    };\n  };\n  BodyPix.prototype.predictForPersonSegmentationAndPart = function (input) {\n    var _a = this.baseModel.predict(input),\n      segmentation = _a.segmentation,\n      partHeatmaps = _a.partHeatmaps,\n      heatmapScores = _a.heatmapScores,\n      offsets = _a.offsets,\n      displacementFwd = _a.displacementFwd,\n      displacementBwd = _a.displacementBwd;\n    return {\n      segmentLogits: segmentation,\n      partHeatmapLogits: partHeatmaps,\n      heatmapScores: heatmapScores,\n      offsets: offsets,\n      displacementFwd: displacementFwd,\n      displacementBwd: displacementBwd\n    };\n  };\n  BodyPix.prototype.predictForMultiPersonInstanceSegmentationAndPart = function (input) {\n    var _a = this.baseModel.predict(input),\n      segmentation = _a.segmentation,\n      longOffsets = _a.longOffsets,\n      heatmapScores = _a.heatmapScores,\n      offsets = _a.offsets,\n      displacementFwd = _a.displacementFwd,\n      displacementBwd = _a.displacementBwd,\n      partHeatmaps = _a.partHeatmaps;\n    return {\n      segmentLogits: segmentation,\n      longOffsets: longOffsets,\n      heatmapScores: heatmapScores,\n      offsets: offsets,\n      displacementFwd: displacementFwd,\n      displacementBwd: displacementBwd,\n      partHeatmaps: partHeatmaps\n    };\n  };\n  /**\n   * Given an image with people, returns a dictionary of all intermediate\n   * tensors including: 1) a binary array with 1 for the pixels that are part of\n   * the person, and 0 otherwise, 2) heatmapScores, 3) offsets, and 4) paddings.\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param internalResolution Defaults to 'medium'. The internal resolution\n   * that the input is resized to before inference. The larger the\n   * internalResolution the more accurate the model at the cost of slower\n   * prediction times. Available values are 'low', 'medium', 'high', 'full', or\n   * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\n   * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\n   *\n   * @param segmentationThreshold The minimum that segmentation values must have\n   * to be considered part of the person. Affects the generation of the\n   * segmentation mask.\n   *\n   * @return A dictionary containing `segmentation`, `heatmapScores`, `offsets`,\n   * and `padding`:\n   * - `segmentation`: A 2d Tensor with 1 for the pixels that are part of the\n   * person, and 0 otherwise. The width and height correspond to the same\n   * dimensions of the input image.\n   * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\n   * pose estimation decoding.\n   * - `offsets`: A 3d Tensor of the keypoint offsets used by pose\n   * estimation decoding.\n   * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement used\n   * by pose estimation decoding.\n   * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\n   * by pose estimation decoding.\n   * - `padding`: The padding (unit pixels) being applied to the input image\n   * before it is fed into the model.\n   */\n  BodyPix.prototype.segmentPersonActivation = function (input, internalResolution, segmentationThreshold) {\n    var _this = this;\n    if (segmentationThreshold === void 0) {\n      segmentationThreshold = 0.5;\n    }\n    var _a = getInputSize(input),\n      height = _a[0],\n      width = _a[1];\n    var internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(internalResolution, this.baseModel.outputStride, [height, width]);\n    var _b = padAndResizeTo(input, internalResolutionHeightAndWidth),\n      resized = _b.resized,\n      padding = _b.padding;\n    var _c = tf.tidy(function () {\n        var _a = _this.predictForPersonSegmentation(resized),\n          segmentLogits = _a.segmentLogits,\n          heatmapScores = _a.heatmapScores,\n          offsets = _a.offsets,\n          displacementFwd = _a.displacementFwd,\n          displacementBwd = _a.displacementBwd;\n        var _b = resized.shape,\n          resizedHeight = _b[0],\n          resizedWidth = _b[1];\n        var scaledSegmentScores = scaleAndCropToInputTensorShape(segmentLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n        return {\n          segmentation: toMaskTensor(tf.squeeze(scaledSegmentScores), segmentationThreshold),\n          heatmapScores: heatmapScores,\n          offsets: offsets,\n          displacementFwd: displacementFwd,\n          displacementBwd: displacementBwd\n        };\n      }),\n      segmentation = _c.segmentation,\n      heatmapScores = _c.heatmapScores,\n      offsets = _c.offsets,\n      displacementFwd = _c.displacementFwd,\n      displacementBwd = _c.displacementBwd;\n    resized.dispose();\n    return {\n      segmentation: segmentation,\n      heatmapScores: heatmapScores,\n      offsets: offsets,\n      displacementFwd: displacementFwd,\n      displacementBwd: displacementBwd,\n      padding: padding,\n      internalResolutionHeightAndWidth: internalResolutionHeightAndWidth\n    };\n  };\n  /**\n   * Given an image with many people, returns a PersonSegmentation dictionary\n   * that contains the segmentation mask for all people and a single pose.\n   *\n   * Note: The segmentation mask returned by this method covers all people but\n   * the pose works well for one person. If you want to estimate instance-level\n   * multiple person segmentation & pose for each person, use\n   * `segmentMultiPerson` instead.\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param config PersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using person decoding.\n   *\n   * @return A SemanticPersonSegmentation dictionary that contains height,\n   * width, the flattened binary segmentation mask and the poses for all people.\n   * The width and height correspond to the same dimensions of the input image.\n   * - `height`: The height of the segmentation data in pixel unit.\n   * - `width`: The width of the segmentation data in pixel unit.\n   * - `data`: The flattened Uint8Array of segmentation data. 1 means the pixel\n   * belongs to a person and 0 means the pixel doesn't belong to a person. The\n   * size of the array is equal to `height` x `width` in row-major order.\n   * - `allPoses`: The 2d poses of all people.\n   */\n  BodyPix.prototype.segmentPerson = function (input, config) {\n    if (config === void 0) {\n      config = PERSON_INFERENCE_CONFIG;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, segmentation, heatmapScores, offsets, displacementFwd, displacementBwd, padding, internalResolutionHeightAndWidth, _b, height, width, result, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            config = __assign(__assign({}, PERSON_INFERENCE_CONFIG), config);\n            validatePersonInferenceConfig(config);\n            _a = this.segmentPersonActivation(input, config.internalResolution, config.segmentationThreshold), segmentation = _a.segmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, padding = _a.padding, internalResolutionHeightAndWidth = _a.internalResolutionHeightAndWidth;\n            _b = segmentation.shape, height = _b[0], width = _b[1];\n            return [4 /*yield*/, segmentation.data()];\n          case 1:\n            result = _c.sent();\n            segmentation.dispose();\n            return [4 /*yield*/, toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];\n          case 2:\n            tensorBuffers = _c.sent();\n            scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\n            poses = decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\n            poses = scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\n            heatmapScores.dispose();\n            offsets.dispose();\n            displacementFwd.dispose();\n            displacementBwd.dispose();\n            return [2 /*return*/, {\n              height: height,\n              width: width,\n              data: result,\n              allPoses: poses\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Given an image with multiple people, returns an *array* of\n   * PersonSegmentation object. Each element in the array corresponding to one\n   * of the people in the input image. In other words, it predicts\n   * instance-level multiple person segmentation & pose for each person.\n   *\n   * The model does standard ImageNet pre-processing before inferring through\n   * the model. The image pixels should have values [0-255].\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config MultiPersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using multi-person decoding.\n   *\n   * @return An array of PersonSegmentation object, each containing a width,\n   * height, a binary array (1 for the pixels that are part of the\n   * person, and 0 otherwise) and 2D pose. The array size corresponds to the\n   * number of pixels in the image. The width and height correspond to the\n   * dimensions of the image the binary array is shaped to, which are the same\n   * dimensions of the input image.\n   */\n  BodyPix.prototype.segmentMultiPerson = function (input, config) {\n    if (config === void 0) {\n      config = MULTI_PERSON_INSTANCE_INFERENCE_CONFIG;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, height, width, internalResolutionHeightAndWidth, _b, resized, padding, _c, segmentation, longOffsets, heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses, instanceMasks;\n      var _this = this;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            config = __assign(__assign({}, MULTI_PERSON_INSTANCE_INFERENCE_CONFIG), config);\n            validateMultiPersonInstanceInferenceConfig(config);\n            _a = getInputSize(input), height = _a[0], width = _a[1];\n            internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(config.internalResolution, this.baseModel.outputStride, [height, width]);\n            _b = padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\n            _c = tf.tidy(function () {\n              var _a = _this.predictForMultiPersonInstanceSegmentationAndPart(resized),\n                segmentLogits = _a.segmentLogits,\n                longOffsets = _a.longOffsets,\n                heatmapScores = _a.heatmapScores,\n                offsets = _a.offsets,\n                displacementFwd = _a.displacementFwd,\n                displacementBwd = _a.displacementBwd;\n              var scaledSegmentScores = scaleAndCropToInputTensorShape(segmentLogits, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n              var scaledLongOffsets;\n              {\n                scaledLongOffsets = longOffsets;\n              }\n              var segmentation = toMaskTensor(tf.squeeze(scaledSegmentScores), config.segmentationThreshold);\n              return {\n                segmentation: segmentation,\n                longOffsets: scaledLongOffsets,\n                heatmapScoresRaw: heatmapScores,\n                offsetsRaw: offsets,\n                displacementFwdRaw: displacementFwd,\n                displacementBwdRaw: displacementBwd\n              };\n            }), segmentation = _c.segmentation, longOffsets = _c.longOffsets, heatmapScoresRaw = _c.heatmapScoresRaw, offsetsRaw = _c.offsetsRaw, displacementFwdRaw = _c.displacementFwdRaw, displacementBwdRaw = _c.displacementBwdRaw;\n            return [4 /*yield*/, toTensorBuffers3D([heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw])];\n          case 1:\n            tensorBuffers = _d.sent();\n            scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\n            poses = decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\n            poses = scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\n            return [4 /*yield*/, decodePersonInstanceMasks(segmentation, longOffsets, poses, height, width, this.baseModel.outputStride, internalResolutionHeightAndWidth, padding, config.scoreThreshold, config.refineSteps, config.minKeypointScore, config.maxDetections)];\n          case 2:\n            instanceMasks = _d.sent();\n            resized.dispose();\n            segmentation.dispose();\n            longOffsets.dispose();\n            heatmapScoresRaw.dispose();\n            offsetsRaw.dispose();\n            displacementFwdRaw.dispose();\n            displacementBwdRaw.dispose();\n            return [2 /*return*/, instanceMasks];\n        }\n      });\n    });\n  };\n  /**\n   * Given an image with many people, returns a dictionary containing: height,\n   * width, a tensor with a part id from 0-24 for the pixels that are\n   * part of a corresponding body part, and -1 otherwise. This does standard\n   * ImageNet pre-processing before inferring through the model.  The image\n   * should pixels should have values [0-255].\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param internalResolution Defaults to 'medium'. The internal resolution\n   * percentage that the input is resized to before inference. The larger the\n   * internalResolution the more accurate the model at the cost of slower\n   * prediction times. Available values are 'low', 'medium', 'high', 'full', or\n   * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\n   * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\n   *\n   * @param segmentationThreshold The minimum that segmentation values must have\n   * to be considered part of the person.  Affects the clipping of the colored\n   * part image.\n   *\n   * @return  A dictionary containing `partSegmentation`, `heatmapScores`,\n   * `offsets`, and `padding`:\n   * - `partSegmentation`: A 2d Tensor with a part id from 0-24 for\n   * the pixels that are part of a corresponding body part, and -1 otherwise.\n   * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\n   * single-person pose estimation decoding.\n   * - `offsets`: A 3d Tensor of the keypoint offsets used by single-person pose\n   * estimation decoding.\n   * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement\n   * used by pose estimation decoding.\n   * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\n   * by pose estimation decoding.\n   * - `padding`: The padding (unit pixels) being applied to the input image\n   * before it is fed into the model.\n   */\n  BodyPix.prototype.segmentPersonPartsActivation = function (input, internalResolution, segmentationThreshold) {\n    var _this = this;\n    if (segmentationThreshold === void 0) {\n      segmentationThreshold = 0.5;\n    }\n    var _a = getInputSize(input),\n      height = _a[0],\n      width = _a[1];\n    var internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(internalResolution, this.baseModel.outputStride, [height, width]);\n    var _b = padAndResizeTo(input, internalResolutionHeightAndWidth),\n      resized = _b.resized,\n      padding = _b.padding;\n    var _c = tf.tidy(function () {\n        var _a = _this.predictForPersonSegmentationAndPart(resized),\n          segmentLogits = _a.segmentLogits,\n          partHeatmapLogits = _a.partHeatmapLogits,\n          heatmapScores = _a.heatmapScores,\n          offsets = _a.offsets,\n          displacementFwd = _a.displacementFwd,\n          displacementBwd = _a.displacementBwd;\n        var _b = resized.shape,\n          resizedHeight = _b[0],\n          resizedWidth = _b[1];\n        var scaledSegmentScores = scaleAndCropToInputTensorShape(segmentLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n        var scaledPartHeatmapScore = scaleAndCropToInputTensorShape(partHeatmapLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n        var segmentation = toMaskTensor(tf.squeeze(scaledSegmentScores), segmentationThreshold);\n        return {\n          partSegmentation: decodePartSegmentation(segmentation, scaledPartHeatmapScore),\n          heatmapScores: heatmapScores,\n          offsets: offsets,\n          displacementFwd: displacementFwd,\n          displacementBwd: displacementBwd\n        };\n      }),\n      partSegmentation = _c.partSegmentation,\n      heatmapScores = _c.heatmapScores,\n      offsets = _c.offsets,\n      displacementFwd = _c.displacementFwd,\n      displacementBwd = _c.displacementBwd;\n    resized.dispose();\n    return {\n      partSegmentation: partSegmentation,\n      heatmapScores: heatmapScores,\n      offsets: offsets,\n      displacementFwd: displacementFwd,\n      displacementBwd: displacementBwd,\n      padding: padding,\n      internalResolutionHeightAndWidth: internalResolutionHeightAndWidth\n    };\n  };\n  /**\n   * Given an image with many people, returns a PartSegmentation dictionary that\n   * contains the body part segmentation mask for all people and a single pose.\n   *\n   * Note: The body part segmentation mask returned by this method covers all\n   * people but the pose works well when there is one person. If you want to\n   * estimate instance-level multiple person body part segmentation & pose for\n   * each person, use `segmentMultiPersonParts` instead.\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param config PersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using single person decoding.\n   *\n   * @return A SemanticPartSegmentation dictionary that contains height, width,\n   * the flattened binary segmentation mask and the pose for the person. The\n   * width and height correspond to the same dimensions of the input image.\n   * - `height`: The height of the person part segmentation data in pixel unit.\n   * - `width`: The width of the person part segmentation data in pixel unit.\n   * - `data`: The flattened Int32Array of person part segmentation data with a\n   * part id from 0-24 for the pixels that are part of a corresponding body\n   * part, and -1 otherwise. The size of the array is equal to `height` x\n   * `width` in row-major order.\n   * - `allPoses`: The 2d poses of all people.\n   */\n  BodyPix.prototype.segmentPersonParts = function (input, config) {\n    if (config === void 0) {\n      config = PERSON_INFERENCE_CONFIG;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, partSegmentation, heatmapScores, offsets, displacementFwd, displacementBwd, padding, internalResolutionHeightAndWidth, _b, height, width, data, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            config = __assign(__assign({}, PERSON_INFERENCE_CONFIG), config);\n            validatePersonInferenceConfig(config);\n            _a = this.segmentPersonPartsActivation(input, config.internalResolution, config.segmentationThreshold), partSegmentation = _a.partSegmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, padding = _a.padding, internalResolutionHeightAndWidth = _a.internalResolutionHeightAndWidth;\n            _b = partSegmentation.shape, height = _b[0], width = _b[1];\n            return [4 /*yield*/, partSegmentation.data()];\n          case 1:\n            data = _c.sent();\n            partSegmentation.dispose();\n            return [4 /*yield*/, toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];\n          case 2:\n            tensorBuffers = _c.sent();\n            scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\n            poses = decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\n            poses = scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\n            heatmapScores.dispose();\n            offsets.dispose();\n            displacementFwd.dispose();\n            displacementBwd.dispose();\n            return [2 /*return*/, {\n              height: height,\n              width: width,\n              data: data,\n              allPoses: poses\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Given an image with multiple people, returns an *array* of PartSegmentation\n   * object. Each element in the array corresponding to one\n   * of the people in the input image. In other words, it predicts\n   * instance-level multiple person body part segmentation & pose for each\n   * person.\n   *\n   * This does standard ImageNet pre-processing before inferring through\n   * the model. The image pixels should have values [0-255].\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config MultiPersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using multi-person decoding.\n   *\n   * @return An array of PartSegmentation object, each containing a width,\n   * height, a flattened array (with part id from 0-24 for the pixels that are\n   * part of a corresponding body part, and -1 otherwise) and 2D pose. The width\n   * and height correspond to the dimensions of the image. Each flattened part\n   * segmentation array size is equal to `height` x `width`.\n   */\n  BodyPix.prototype.segmentMultiPersonParts = function (input, config) {\n    if (config === void 0) {\n      config = MULTI_PERSON_INSTANCE_INFERENCE_CONFIG;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, height, width, internalResolutionHeightAndWidth, _b, resized, padding, _c, segmentation, longOffsets, heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw, partSegmentation, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses, instanceMasks;\n      var _this = this;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            config = __assign(__assign({}, MULTI_PERSON_INSTANCE_INFERENCE_CONFIG), config);\n            validateMultiPersonInstanceInferenceConfig(config);\n            _a = getInputSize(input), height = _a[0], width = _a[1];\n            internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(config.internalResolution, this.baseModel.outputStride, [height, width]);\n            _b = padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\n            _c = tf.tidy(function () {\n              var _a = _this.predictForMultiPersonInstanceSegmentationAndPart(resized),\n                segmentLogits = _a.segmentLogits,\n                longOffsets = _a.longOffsets,\n                heatmapScores = _a.heatmapScores,\n                offsets = _a.offsets,\n                displacementFwd = _a.displacementFwd,\n                displacementBwd = _a.displacementBwd,\n                partHeatmaps = _a.partHeatmaps;\n              // decoding with scaling.\n              var scaledSegmentScores = scaleAndCropToInputTensorShape(segmentLogits, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n              // decoding with scaling.\n              var scaledPartSegmentationScores = scaleAndCropToInputTensorShape(partHeatmaps, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n              var scaledLongOffsets = longOffsets;\n              var segmentation = toMaskTensor(tf.squeeze(scaledSegmentScores), config.segmentationThreshold);\n              var partSegmentation = decodeOnlyPartSegmentation(scaledPartSegmentationScores);\n              return {\n                segmentation: segmentation,\n                longOffsets: scaledLongOffsets,\n                heatmapScoresRaw: heatmapScores,\n                offsetsRaw: offsets,\n                displacementFwdRaw: displacementFwd,\n                displacementBwdRaw: displacementBwd,\n                partSegmentation: partSegmentation\n              };\n            }), segmentation = _c.segmentation, longOffsets = _c.longOffsets, heatmapScoresRaw = _c.heatmapScoresRaw, offsetsRaw = _c.offsetsRaw, displacementFwdRaw = _c.displacementFwdRaw, displacementBwdRaw = _c.displacementBwdRaw, partSegmentation = _c.partSegmentation;\n            return [4 /*yield*/, toTensorBuffers3D([heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw])];\n          case 1:\n            tensorBuffers = _d.sent();\n            scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\n            poses = decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\n            poses = scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\n            return [4 /*yield*/, decodePersonInstancePartMasks(segmentation, longOffsets, partSegmentation, poses, height, width, this.baseModel.outputStride, internalResolutionHeightAndWidth, padding, config.scoreThreshold, config.refineSteps, config.minKeypointScore, config.maxDetections)];\n          case 2:\n            instanceMasks = _d.sent();\n            resized.dispose();\n            segmentation.dispose();\n            longOffsets.dispose();\n            heatmapScoresRaw.dispose();\n            offsetsRaw.dispose();\n            displacementFwdRaw.dispose();\n            displacementBwdRaw.dispose();\n            partSegmentation.dispose();\n            return [2 /*return*/, instanceMasks];\n        }\n      });\n    });\n  };\n  BodyPix.prototype.dispose = function () {\n    this.baseModel.dispose();\n  };\n  return BodyPix;\n}();\n/**\n * Loads the MobileNet BodyPix model.\n */\nfunction loadMobileNet(config) {\n  return __awaiter(this, void 0, void 0, function () {\n    var outputStride, quantBytes, multiplier, url, graphModel, mobilenet;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          outputStride = config.outputStride;\n          quantBytes = config.quantBytes;\n          multiplier = config.multiplier;\n          if (tf == null) {\n            throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" + \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\n          }\n          url = mobileNetSavedModel(outputStride, multiplier, quantBytes);\n          return [4 /*yield*/, tfconv.loadGraphModel(config.modelUrl || url)];\n        case 1:\n          graphModel = _a.sent();\n          mobilenet = new MobileNet(graphModel, outputStride);\n          return [2 /*return*/, new BodyPix(mobilenet)];\n      }\n    });\n  });\n}\n/**\n * Loads the ResNet BodyPix model.\n */\nfunction loadResNet(config) {\n  return __awaiter(this, void 0, void 0, function () {\n    var outputStride, quantBytes, url, graphModel, resnet;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          outputStride = config.outputStride;\n          quantBytes = config.quantBytes;\n          if (tf == null) {\n            throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" + \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\n          }\n          url = resNet50SavedModel(outputStride, quantBytes);\n          return [4 /*yield*/, tfconv.loadGraphModel(config.modelUrl || url)];\n        case 1:\n          graphModel = _a.sent();\n          resnet = new ResNet(graphModel, outputStride);\n          return [2 /*return*/, new BodyPix(resnet)];\n      }\n    });\n  });\n}\n/**\n * Loads the BodyPix model instance from a checkpoint, with the ResNet\n * or MobileNet architecture. The model to be loaded is configurable using the\n * config dictionary ModelConfig. Please find more details in the\n * documentation of the ModelConfig.\n *\n * @param config ModelConfig dictionary that contains parameters for\n * the BodyPix loading process. Please find more details of each parameters\n * in the documentation of the ModelConfig interface. The predefined\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\n * for defining your customized config.\n */\nfunction load(config) {\n  if (config === void 0) {\n    config = MOBILENET_V1_CONFIG;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      config = validateModelConfig(config);\n      if (config.architecture === 'ResNet50') {\n        return [2 /*return*/, loadResNet(config)];\n      } else if (config.architecture === 'MobileNetV1') {\n        return [2 /*return*/, loadMobileNet(config)];\n      } else {\n        return [2 /*return*/, null];\n      }\n    });\n  });\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// method copied from bGlur in https://codepen.io/zhaojun/pen/zZmRQe\nfunction cpuBlur(canvas, image, blur) {\n  var ctx = canvas.getContext('2d');\n  var sum = 0;\n  var delta = 5;\n  var alphaLeft = 1 / (2 * Math.PI * delta * delta);\n  var step = blur < 3 ? 1 : 2;\n  for (var y = -blur; y <= blur; y += step) {\n    for (var x = -blur; x <= blur; x += step) {\n      var weight = alphaLeft * Math.exp(-(x * x + y * y) / (2 * delta * delta));\n      sum += weight;\n    }\n  }\n  for (var y = -blur; y <= blur; y += step) {\n    for (var x = -blur; x <= blur; x += step) {\n      ctx.globalAlpha = alphaLeft * Math.exp(-(x * x + y * y) / (2 * delta * delta)) / sum * blur;\n      ctx.drawImage(image, x, y);\n    }\n  }\n  ctx.globalAlpha = 1;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar offScreenCanvases = {};\nfunction isSafari() {\n  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n}\nfunction assertSameDimensions(_a, _b, nameA, nameB) {\n  var widthA = _a.width,\n    heightA = _a.height;\n  var widthB = _b.width,\n    heightB = _b.height;\n  if (widthA !== widthB || heightA !== heightB) {\n    throw new Error(\"error: dimensions must match. \".concat(nameA, \" has dimensions \").concat(widthA, \"x\").concat(heightA, \", \").concat(nameB, \" has dimensions \").concat(widthB, \"x\").concat(heightB));\n  }\n}\nfunction flipCanvasHorizontal(canvas) {\n  var ctx = canvas.getContext('2d');\n  ctx.scale(-1, 1);\n  ctx.translate(-canvas.width, 0);\n}\nfunction drawWithCompositing(ctx, image, compositeOperation) {\n  ctx.globalCompositeOperation = compositeOperation;\n  ctx.drawImage(image, 0, 0);\n}\nfunction createOffScreenCanvas() {\n  if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else if (typeof OffscreenCanvas !== 'undefined') {\n    return new OffscreenCanvas(0, 0);\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\nfunction ensureOffscreenCanvasCreated(id) {\n  if (!offScreenCanvases[id]) {\n    offScreenCanvases[id] = createOffScreenCanvas();\n  }\n  return offScreenCanvases[id];\n}\nfunction drawAndBlurImageOnCanvas(image, blurAmount, canvas) {\n  var height = image.height,\n    width = image.width;\n  var ctx = canvas.getContext('2d');\n  canvas.width = width;\n  canvas.height = height;\n  ctx.clearRect(0, 0, width, height);\n  ctx.save();\n  if (isSafari()) {\n    cpuBlur(canvas, image, blurAmount);\n  } else {\n    // tslint:disable:no-any\n    ctx.filter = \"blur(\".concat(blurAmount, \"px)\");\n    ctx.drawImage(image, 0, 0, width, height);\n  }\n  ctx.restore();\n}\nfunction drawAndBlurImageOnOffScreenCanvas(image, blurAmount, offscreenCanvasName) {\n  var canvas = ensureOffscreenCanvasCreated(offscreenCanvasName);\n  if (blurAmount === 0) {\n    renderImageToCanvas(image, canvas);\n  } else {\n    drawAndBlurImageOnCanvas(image, blurAmount, canvas);\n  }\n  return canvas;\n}\nfunction renderImageToCanvas(image, canvas) {\n  var width = image.width,\n    height = image.height;\n  canvas.width = width;\n  canvas.height = height;\n  var ctx = canvas.getContext('2d');\n  ctx.drawImage(image, 0, 0, width, height);\n}\n/**\n * Draw an image on a canvas\n */\nfunction renderImageDataToCanvas(image, canvas) {\n  canvas.width = image.width;\n  canvas.height = image.height;\n  var ctx = canvas.getContext('2d');\n  ctx.putImageData(image, 0, 0);\n}\nfunction renderImageDataToOffScreenCanvas(image, canvasName) {\n  var canvas = ensureOffscreenCanvasCreated(canvasName);\n  renderImageDataToCanvas(image, canvas);\n  return canvas;\n}\n/**\n * Given the output from estimating multi-person segmentation, generates an\n * image with foreground and background color at each pixel determined by the\n * corresponding binary segmentation value at the pixel from the output.  In\n * other words, pixels where there is a person will be colored with foreground\n * color and where there is not a person will be colored with background color.\n *\n * @param personOrPartSegmentation The output from\n * `segmentPerson`, `segmentMultiPerson`,\n * `segmentPersonParts` or `segmentMultiPersonParts`. They can\n * be SemanticPersonSegmentation object, an array of PersonSegmentation object,\n * SemanticPartSegmentation object, or an array of PartSegmentation object.\n *\n * @param foreground Default to {r:0, g:0, b:0, a: 0}. The foreground color\n * (r,g,b,a) for visualizing pixels that belong to people.\n *\n * @param background Default to {r:0, g:0, b:0, a: 255}. The background color\n * (r,g,b,a) for visualizing pixels that don't belong to people.\n *\n * @param drawContour Default to false. Whether to draw the contour around each\n * person's segmentation mask or body part mask.\n *\n * @param foregroundIds Default to [1]. The integer values that represent\n * foreground. For person segmentation, 1 is the foreground. For body part\n * segmentation, it can be a subset of all body parts ids.\n *\n * @returns An ImageData with the same width and height of\n * all the PersonSegmentation in multiPersonSegmentation, with opacity and\n * transparency at each pixel determined by the corresponding binary\n * segmentation value at the pixel from the output.\n */\nfunction toMask(personOrPartSegmentation, foreground, background, drawContour, foregroundIds) {\n  if (foreground === void 0) {\n    foreground = {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 0\n    };\n  }\n  if (background === void 0) {\n    background = {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 255\n    };\n  }\n  if (drawContour === void 0) {\n    drawContour = false;\n  }\n  if (foregroundIds === void 0) {\n    foregroundIds = [1];\n  }\n  if (Array.isArray(personOrPartSegmentation) && personOrPartSegmentation.length === 0) {\n    return null;\n  }\n  var multiPersonOrPartSegmentation;\n  if (!Array.isArray(personOrPartSegmentation)) {\n    multiPersonOrPartSegmentation = [personOrPartSegmentation];\n  } else {\n    multiPersonOrPartSegmentation = personOrPartSegmentation;\n  }\n  var _a = multiPersonOrPartSegmentation[0],\n    width = _a.width,\n    height = _a.height;\n  var bytes = new Uint8ClampedArray(width * height * 4);\n  function drawStroke(bytes, row, column, width, radius, color) {\n    if (color === void 0) {\n      color = {\n        r: 0,\n        g: 255,\n        b: 255,\n        a: 255\n      };\n    }\n    for (var i = -radius; i <= radius; i++) {\n      for (var j = -radius; j <= radius; j++) {\n        if (i !== 0 && j !== 0) {\n          var n = (row + i) * width + (column + j);\n          bytes[4 * n + 0] = color.r;\n          bytes[4 * n + 1] = color.g;\n          bytes[4 * n + 2] = color.b;\n          bytes[4 * n + 3] = color.a;\n        }\n      }\n    }\n  }\n  function isSegmentationBoundary(segmentationData, row, column, width, foregroundIds, radius) {\n    if (foregroundIds === void 0) {\n      foregroundIds = [1];\n    }\n    if (radius === void 0) {\n      radius = 1;\n    }\n    var numberBackgroundPixels = 0;\n    for (var i = -radius; i <= radius; i++) {\n      var _loop_2 = function (j) {\n        if (i !== 0 && j !== 0) {\n          var n_1 = (row + i) * width + (column + j);\n          if (!foregroundIds.some(function (id) {\n            return id === segmentationData[n_1];\n          })) {\n            numberBackgroundPixels += 1;\n          }\n        }\n      };\n      for (var j = -radius; j <= radius; j++) {\n        _loop_2(j);\n      }\n    }\n    return numberBackgroundPixels > 0;\n  }\n  for (var i = 0; i < height; i += 1) {\n    var _loop_1 = function (j) {\n      var n = i * width + j;\n      bytes[4 * n + 0] = background.r;\n      bytes[4 * n + 1] = background.g;\n      bytes[4 * n + 2] = background.b;\n      bytes[4 * n + 3] = background.a;\n      var _loop_3 = function (k) {\n        if (foregroundIds.some(function (id) {\n          return id === multiPersonOrPartSegmentation[k].data[n];\n        })) {\n          bytes[4 * n] = foreground.r;\n          bytes[4 * n + 1] = foreground.g;\n          bytes[4 * n + 2] = foreground.b;\n          bytes[4 * n + 3] = foreground.a;\n          var isBoundary = isSegmentationBoundary(multiPersonOrPartSegmentation[k].data, i, j, width, foregroundIds);\n          if (drawContour && i - 1 >= 0 && i + 1 < height && j - 1 >= 0 && j + 1 < width && isBoundary) {\n            drawStroke(bytes, i, j, width, 1);\n          }\n        }\n      };\n      for (var k = 0; k < multiPersonOrPartSegmentation.length; k++) {\n        _loop_3(k);\n      }\n    };\n    for (var j = 0; j < width; j += 1) {\n      _loop_1(j);\n    }\n  }\n  return new ImageData(bytes, width, height);\n}\nvar RAINBOW_PART_COLORS = [[110, 64, 170], [143, 61, 178], [178, 60, 178], [210, 62, 167], [238, 67, 149], [255, 78, 125], [255, 94, 99], [255, 115, 75], [255, 140, 56], [239, 167, 47], [217, 194, 49], [194, 219, 64], [175, 240, 91], [135, 245, 87], [96, 247, 96], [64, 243, 115], [40, 234, 141], [28, 219, 169], [26, 199, 194], [33, 176, 213], [47, 150, 224], [65, 125, 224], [84, 101, 214], [99, 81, 195]];\n/**\n * Given the output from person body part segmentation (or multi-person\n * instance body part segmentation) and an array of colors indexed by part id,\n * generates an image with the corresponding color for each part at each pixel,\n * and white pixels where there is no part.\n *\n * @param partSegmentation The output from segmentPersonParts\n * or segmentMultiPersonParts. The former is a SemanticPartSegmentation\n * object and later is an array of PartSegmentation object.\n *\n * @param partColors A multi-dimensional array of rgb colors indexed by\n * part id.  Must have 24 colors, one for every part.\n *\n * @returns An ImageData with the same width and height of all the element in\n * multiPersonPartSegmentation, with the corresponding color for each part at\n * each pixel, and black pixels where there is no part.\n */\nfunction toColoredPartMask(partSegmentation, partColors) {\n  if (partColors === void 0) {\n    partColors = RAINBOW_PART_COLORS;\n  }\n  if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\n    return null;\n  }\n  var multiPersonPartSegmentation;\n  if (!Array.isArray(partSegmentation)) {\n    multiPersonPartSegmentation = [partSegmentation];\n  } else {\n    multiPersonPartSegmentation = partSegmentation;\n  }\n  var _a = multiPersonPartSegmentation[0],\n    width = _a.width,\n    height = _a.height;\n  var bytes = new Uint8ClampedArray(width * height * 4);\n  for (var i = 0; i < height * width; ++i) {\n    // invert mask.  Invert the segmentation mask.\n    var j = i * 4;\n    bytes[j + 0] = 255;\n    bytes[j + 1] = 255;\n    bytes[j + 2] = 255;\n    bytes[j + 3] = 255;\n    for (var k = 0; k < multiPersonPartSegmentation.length; k++) {\n      var partId = multiPersonPartSegmentation[k].data[i];\n      if (partId !== -1) {\n        var color = partColors[partId];\n        if (!color) {\n          throw new Error(\"No color could be found for part id \".concat(partId));\n        }\n        bytes[j + 0] = color[0];\n        bytes[j + 1] = color[1];\n        bytes[j + 2] = color[2];\n        bytes[j + 3] = 255;\n      }\n    }\n  }\n  return new ImageData(bytes, width, height);\n}\nvar CANVAS_NAMES = {\n  blurred: 'blurred',\n  blurredMask: 'blurred-mask',\n  mask: 'mask',\n  lowresPartMask: 'lowres-part-mask'\n};\n/**\n * Given an image and a maskImage of type ImageData, draws the image with the\n * mask on top of it onto a canvas.\n *\n * @param canvas The canvas to be drawn onto.\n *\n * @param image The original image to apply the mask to.\n *\n * @param maskImage An ImageData containing the mask.  Ideally this should be\n * generated by toMask or toColoredPartMask.\n *\n * @param maskOpacity The opacity of the mask when drawing it on top of the\n * image. Defaults to 0.7. Should be a float between 0 and 1.\n *\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\n * Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\n * to false.\n */\nfunction drawMask(canvas, image, maskImage, maskOpacity, maskBlurAmount, flipHorizontal) {\n  if (maskOpacity === void 0) {\n    maskOpacity = 0.7;\n  }\n  if (maskBlurAmount === void 0) {\n    maskBlurAmount = 0;\n  }\n  if (flipHorizontal === void 0) {\n    flipHorizontal = false;\n  }\n  var _a = getInputSize(image),\n    height = _a[0],\n    width = _a[1];\n  canvas.width = width;\n  canvas.height = height;\n  var ctx = canvas.getContext('2d');\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n  ctx.drawImage(image, 0, 0);\n  ctx.globalAlpha = maskOpacity;\n  if (maskImage) {\n    assertSameDimensions({\n      width: width,\n      height: height\n    }, maskImage, 'image', 'mask');\n    var mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\n    var blurredMask = drawAndBlurImageOnOffScreenCanvas(mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\n    ctx.drawImage(blurredMask, 0, 0, width, height);\n  }\n  ctx.restore();\n}\n/**\n * Given an image and a maskImage of type ImageData, draws the image with the\n * pixelated mask on top of it onto a canvas.\n *\n * @param canvas The canvas to be drawn onto.\n *\n * @param image The original image to apply the mask to.\n *\n * @param maskImage An ImageData containing the mask.  Ideally this should be\n * generated by toColoredPartMask.\n *\n * @param maskOpacity The opacity of the mask when drawing it on top of the\n * image. Defaults to 0.7. Should be a float between 0 and 1.\n *\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\n * Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\n * to false.\n *\n * @param pixelCellWidth The width of each pixel cell. Default to 10 px.\n */\nfunction drawPixelatedMask(canvas, image, maskImage, maskOpacity, maskBlurAmount, flipHorizontal, pixelCellWidth) {\n  if (maskOpacity === void 0) {\n    maskOpacity = 0.7;\n  }\n  if (maskBlurAmount === void 0) {\n    maskBlurAmount = 0;\n  }\n  if (flipHorizontal === void 0) {\n    flipHorizontal = false;\n  }\n  if (pixelCellWidth === void 0) {\n    pixelCellWidth = 10.0;\n  }\n  var _a = getInputSize(image),\n    height = _a[0],\n    width = _a[1];\n  assertSameDimensions({\n    width: width,\n    height: height\n  }, maskImage, 'image', 'mask');\n  var mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\n  var blurredMask = drawAndBlurImageOnOffScreenCanvas(mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\n  canvas.width = blurredMask.width;\n  canvas.height = blurredMask.height;\n  var ctx = canvas.getContext('2d');\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n  var offscreenCanvas = ensureOffscreenCanvasCreated(CANVAS_NAMES.lowresPartMask);\n  var offscreenCanvasCtx = offscreenCanvas.getContext('2d');\n  offscreenCanvas.width = blurredMask.width * (1.0 / pixelCellWidth);\n  offscreenCanvas.height = blurredMask.height * (1.0 / pixelCellWidth);\n  offscreenCanvasCtx.drawImage(blurredMask, 0, 0, blurredMask.width, blurredMask.height, 0, 0, offscreenCanvas.width, offscreenCanvas.height);\n  ctx.imageSmoothingEnabled = false;\n  ctx.drawImage(offscreenCanvas, 0, 0, offscreenCanvas.width, offscreenCanvas.height, 0, 0, canvas.width, canvas.height);\n  // Draws vertical grid lines that are `pixelCellWidth` apart from each other.\n  for (var i = 0; i < offscreenCanvas.width; i++) {\n    ctx.beginPath();\n    ctx.strokeStyle = '#ffffff';\n    ctx.moveTo(pixelCellWidth * i, 0);\n    ctx.lineTo(pixelCellWidth * i, canvas.height);\n    ctx.stroke();\n  }\n  // Draws horizontal grid lines that are `pixelCellWidth` apart from each\n  // other.\n  for (var i = 0; i < offscreenCanvas.height; i++) {\n    ctx.beginPath();\n    ctx.strokeStyle = '#ffffff';\n    ctx.moveTo(0, pixelCellWidth * i);\n    ctx.lineTo(canvas.width, pixelCellWidth * i);\n    ctx.stroke();\n  }\n  ctx.globalAlpha = 1.0 - maskOpacity;\n  ctx.drawImage(image, 0, 0, blurredMask.width, blurredMask.height);\n  ctx.restore();\n}\nfunction createPersonMask(multiPersonSegmentation, edgeBlurAmount) {\n  var backgroundMaskImage = toMask(multiPersonSegmentation, {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 255\n  }, {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 0\n  });\n  var backgroundMask = renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\n  if (edgeBlurAmount === 0) {\n    return backgroundMask;\n  } else {\n    return drawAndBlurImageOnOffScreenCanvas(backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\n  }\n}\n/**\n * Given a personSegmentation and an image, draws the image with its background\n * blurred onto the canvas.\n *\n * @param canvas The canvas to draw the background-blurred image onto.\n *\n * @param image The image to blur the background of and draw.\n *\n * @param personSegmentation A SemanticPersonSegmentation or an array of\n * PersonSegmentation object.\n *\n * @param backgroundBlurAmount How many pixels in the background blend into each\n * other.  Defaults to 3. Should be an integer between 1 and 20.\n *\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\n * to false.\n */\nfunction drawBokehEffect(canvas, image, multiPersonSegmentation, backgroundBlurAmount, edgeBlurAmount, flipHorizontal) {\n  if (backgroundBlurAmount === void 0) {\n    backgroundBlurAmount = 3;\n  }\n  if (edgeBlurAmount === void 0) {\n    edgeBlurAmount = 3;\n  }\n  if (flipHorizontal === void 0) {\n    flipHorizontal = false;\n  }\n  var blurredImage = drawAndBlurImageOnOffScreenCanvas(image, backgroundBlurAmount, CANVAS_NAMES.blurred);\n  canvas.width = blurredImage.width;\n  canvas.height = blurredImage.height;\n  var ctx = canvas.getContext('2d');\n  if (Array.isArray(multiPersonSegmentation) && multiPersonSegmentation.length === 0) {\n    ctx.drawImage(blurredImage, 0, 0);\n    return;\n  }\n  var personMask = createPersonMask(multiPersonSegmentation, edgeBlurAmount);\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n  // draw the original image on the final canvas\n  var _a = getInputSize(image),\n    height = _a[0],\n    width = _a[1];\n  ctx.drawImage(image, 0, 0, width, height);\n  // \"destination-in\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // crop what's not the person using the mask from the original image\n  drawWithCompositing(ctx, personMask, 'destination-in');\n  // \"destination-over\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // draw the blurred background on top of the original image where it doesn't\n  // overlap.\n  drawWithCompositing(ctx, blurredImage, 'destination-over');\n  ctx.restore();\n}\nfunction createBodyPartMask(multiPersonPartSegmentation, bodyPartIdsToMask, edgeBlurAmount) {\n  var backgroundMaskImage = toMask(multiPersonPartSegmentation, {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 0\n  }, {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 255\n  }, true, bodyPartIdsToMask);\n  var backgroundMask = renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\n  if (edgeBlurAmount === 0) {\n    return backgroundMask;\n  } else {\n    return drawAndBlurImageOnOffScreenCanvas(backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\n  }\n}\n/**\n * Given a personSegmentation and an image, draws the image with its background\n * blurred onto the canvas.\n *\n * @param canvas The canvas to draw the background-blurred image onto.\n *\n * @param image The image to blur the background of and draw.\n *\n * @param partSegmentation A SemanticPartSegmentation or an array of\n * PartSegmentation object.\n *\n * @param bodyPartIdsToBlur Default to [0, 1] (left-face and right-face). An\n * array of body part ids to blur. Each must be one of the 24 body part ids.\n *\n * @param backgroundBlurAmount How many pixels in the background blend into each\n * other.  Defaults to 3. Should be an integer between 1 and 20.\n *\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\n * to false.\n */\nfunction blurBodyPart(canvas, image, partSegmentation, bodyPartIdsToBlur, backgroundBlurAmount, edgeBlurAmount, flipHorizontal) {\n  if (bodyPartIdsToBlur === void 0) {\n    bodyPartIdsToBlur = [0, 1];\n  }\n  if (backgroundBlurAmount === void 0) {\n    backgroundBlurAmount = 3;\n  }\n  if (edgeBlurAmount === void 0) {\n    edgeBlurAmount = 3;\n  }\n  if (flipHorizontal === void 0) {\n    flipHorizontal = false;\n  }\n  var blurredImage = drawAndBlurImageOnOffScreenCanvas(image, backgroundBlurAmount, CANVAS_NAMES.blurred);\n  canvas.width = blurredImage.width;\n  canvas.height = blurredImage.height;\n  var ctx = canvas.getContext('2d');\n  if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\n    ctx.drawImage(blurredImage, 0, 0);\n    return;\n  }\n  var bodyPartMask = createBodyPartMask(partSegmentation, bodyPartIdsToBlur, edgeBlurAmount);\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n  // draw the original image on the final canvas\n  var _a = getInputSize(image),\n    height = _a[0],\n    width = _a[1];\n  ctx.drawImage(image, 0, 0, width, height);\n  // \"destination-in\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // crop what's not the person using the mask from the original image\n  drawWithCompositing(ctx, bodyPartMask, 'destination-in');\n  // \"destination-over\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // draw the blurred background on top of the original image where it doesn't\n  // overlap.\n  drawWithCompositing(ctx, blurredImage, 'destination-over');\n  ctx.restore();\n}\n\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nvar PART_CHANNELS = ['left_face', 'right_face', 'left_upper_arm_front', 'left_upper_arm_back', 'right_upper_arm_front', 'right_upper_arm_back', 'left_lower_arm_front', 'left_lower_arm_back', 'right_lower_arm_front', 'right_lower_arm_back', 'left_hand', 'right_hand', 'torso_front', 'torso_back', 'left_upper_leg_front', 'left_upper_leg_back', 'right_upper_leg_front', 'right_upper_leg_back', 'left_lower_leg_front', 'left_lower_leg_back', 'right_lower_leg_front', 'right_lower_leg_back', 'left_feet', 'right_feet'];\n\n/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nvar version = '2.2.1';\nexport { BodyPix, PART_CHANNELS, blurBodyPart, drawBokehEffect, drawMask, drawPixelatedMask, flipPoseHorizontal, load, resizeAndPadTo, scaleAndCropToInputTensorShape, toColoredPartMask, toMask, version };","map":{"version":3,"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","v","op","TypeError","pop","push","toFlattenedOneHotPartMap","partHeatmapScores","numParts","shape","partMapLocations","tf","argMax","partMapFlattened","reshape","oneHot","clipByMask2d","image","mask","mul","toMaskTensor","segmentScores","threshold","tidy","cast","greater","scalar","decodePartSegmentation","segmentationMask","_a","partMapHeight","partMapWidth","flattenedMap","partNumbers","expandDims","range","matMul","partMap","partMapShiftedUpForClipping","add","sub","decodeOnlyPartSegmentation","BaseModel","model","outputStride","inputShape","inputs","util","assert","concat","predict","input","_this","asFloat","preprocessInput","asBatch","results","results3d","map","squeeze","namedResults","nameOutputResults","heatmapScores","sigmoid","heatmap","offsets","displacementFwd","displacementBwd","segmentation","partHeatmaps","longOffsets","partOffsets","dispose","MobileNet","_super","div","PART_NAMES","NUM_KEYPOINTS","PART_IDS","reduce","jointName","CONNECTED_PART_NAMES","POSE_CHAIN","jointNameA","jointNameB","getScale","_b","padding","height","width","inputResolutionY","inputResolutionX","padT","top","padB","bottom","padL","left","padR","right","scaleY","scaleX","getOffsetPoint","x","keypoint","get","getImageCoords","part","heatmapY","heatmapX","id","clamp","a","min","max","squaredDistance","y1","x1","y2","x2","dy","dx","addVectors","computeDistance","embedding","pose","minPartScore","distance","numKpt","keypoints","score","Math","pow","position","Infinity","convertToPositionInOuput","stride","round","getEmbedding","location","keypointIndex","convertToPosition","outputResolutionX","refineSteps","newLocation","nn","newPos","nn_1","matchEmbeddingToInstance","poses","numKptForMatching","_c","embed","pair","keypointsIndex","kMin","kMinDist","k","dist","getOutputResolution","outputResolutionY","decodeMultipleMasksCPU","posesAboveScore","inHeight","inWidth","dataArrays","Uint8Array","fill","j","prob","decodeMultiplePartMasksCPU","partSegmentaion","Int32Array","decodeMultipleMasksWebGl","minKptScore","maxNumPeople","origHeight","origWidth","slice","outHeight","outWidth","shapedLongOffsets","poseVals","Float32Array","poseOffset","kp","offset","_d","posesTensor","tensor","program","variableNames","outputShape","userCode","webglBackend","backend","compileAndRun","toPersonKSegmentation","equal","toPersonKPartSegmentation","bodyParts","isWebGlBackend","getBackend","decodePersonInstanceMasks","minPoseScore","minKeypointScore","filter","personSegmentations","masksTensorInfo","masksTensor","engine","makeTensorFromDataId","dataId","dtype","all","data","personSegmentationsData","forEach","segmentationsData","longOffsetsData","decodePersonInstancePartMasks","partSegmentation","partSegmentations","partSegmentationsByPersonData","partSegmentaionData","half","floor","MaxHeap","maxSize","getElementValue","priorityQueue","numberOfElements","enqueue","swim","dequeue","exchange","sink","empty","size","less","getValueAt","scoreIsMaximumInLocalWindow","keypointId","localMaximumRadius","scores","localMaximum","yStart","yEnd","yCurrent","xStart","xEnd","xCurrent","buildPartWithScoreQueue","scoreThreshold","numKeypoints","queue","parentChildrenTuples","parentJoinName","childJoinName","parentToChildEdges","childJointId","childToParentEdges","parentJointId","getDisplacement","edgeId","point","displacements","numEdges","getStridedIndexNearPoint","traverseToTargetKeypoint","sourceKeypoint","targetKeypointId","scoresBuffer","offsetRefineStep","sourceKeypointIndices","displacement","displacedPoint","targetKeypoint","targetKeypointIndices","offsetPoint","targetKeyPointIndices","decodePose","root","displacementsFwd","displacementsBwd","instanceKeypoints","rootPart","rootScore","rootPoint","edge","sourceKeypointId","withinNmsRadiusOfCorrespondingPoint","squaredNmsRadius","some","correspondingKeypoint","getInstanceScore","existingPoses","notOverlappedKeypointScores","kLocalMaximumRadius","decodeMultiplePoses","offsetsBuffer","displacementsFwdBuffer","displacementsBwdBuffer","maxPoseDetections","nmsRadius","rootImageCoords","imageNetMean","ResNet","RESNET50_BASE_URL","MOBILENET_BASE_URL","resNet50SavedModel","quantBytes","graphJson","mobileNetSavedModel","multiplier","toStr","getSizeFromImageLikeElement","offsetHeight","offsetWidth","Error","getSizeFromVideoElement","hasAttribute","videoHeight","videoWidth","getInputSize","HTMLCanvasElement","OffscreenCanvas","HTMLImageElement","ImageData","HTMLVideoElement","Tensor","isValidInputResolution","resolution","toValidInputResolution","inputResolution","INTERNAL_RESOLUTION_STRING_OPTIONS","low","medium","high","full","INTERNAL_RESOLUTION_PERCENTAGES","MIN_INTERNAL_RESOLUTION","MAX_INTERNAL_RESOLUTION","toInternalResolutionPercentage","internalResolution","values","join","toInputResolutionHeightAndWidth","inputHeight","inputWidth","internalResolutionPercentage","toInputTensor","browser","fromPixels","resizeAndPadTo","imageTensor","flipHorizontal","targetH","targetW","targetAspect","aspect","resizeW","resizeH","ceil","padHeight","padWidth","resizedAndPadded","resized","resizeBilinear","reverse","padded","pad3d","paddedBy","scaleAndCropToInputTensorShape","applySigmoidActivation","inputTensorHeight","inputTensorWidth","resizedAndPaddedHeight","resizedAndPaddedWidth","_e","inResizedAndPadded","removePaddingAndResizeBack","originalHeight","originalWidth","batchedImage","cropAndResize","padAndResizeTo","toTensorBuffers3D","tensors","buffer","scalePose","offsetY","offsetX","scalePoses","flipPoseHorizontal","imageWidth","flipPosesHorizontal","scaleAndFlipPoses","inputResolutionHeight","inputResolutionWidth","scaledPoses","APPLY_SIGMOID_ACTIVATION","FLIP_POSES_AFTER_SCALING","MOBILENET_V1_CONFIG","architecture","VALID_ARCHITECTURE","VALID_STRIDE","VALID_MULTIPLIER","VALID_QUANT_BYTES","validateModelConfig","config","indexOf","PERSON_INFERENCE_CONFIG","segmentationThreshold","maxDetections","MULTI_PERSON_INSTANCE_INFERENCE_CONFIG","validatePersonInferenceConfig","validateMultiPersonInstanceInferenceConfig","BodyPix","net","baseModel","predictForPersonSegmentation","segmentLogits","predictForPersonSegmentationAndPart","partHeatmapLogits","predictForMultiPersonInstanceSegmentationAndPart","segmentPersonActivation","internalResolutionHeightAndWidth","resizedHeight","resizedWidth","scaledSegmentScores","segmentPerson","tensorBuffers","scoresBuf","offsetsBuf","displacementsFwdBuf","displacementsBwdBuf","allPoses","segmentMultiPerson","scaledLongOffsets","heatmapScoresRaw","offsetsRaw","displacementFwdRaw","displacementBwdRaw","instanceMasks","segmentPersonPartsActivation","scaledPartHeatmapScore","segmentPersonParts","segmentMultiPersonParts","scaledPartSegmentationScores","loadMobileNet","url","tfconv","loadGraphModel","modelUrl","graphModel","mobilenet","loadResNet","resnet","load","cpuBlur","canvas","blur","ctx","getContext","sum","delta","alphaLeft","PI","weight","exp","globalAlpha","drawImage","offScreenCanvases","isSafari","test","navigator","userAgent","assertSameDimensions","nameA","nameB","widthA","heightA","widthB","heightB","flipCanvasHorizontal","scale","translate","drawWithCompositing","compositeOperation","globalCompositeOperation","createOffScreenCanvas","document","createElement","ensureOffscreenCanvasCreated","drawAndBlurImageOnCanvas","blurAmount","clearRect","save","restore","drawAndBlurImageOnOffScreenCanvas","offscreenCanvasName","renderImageToCanvas","renderImageDataToCanvas","putImageData","renderImageDataToOffScreenCanvas","canvasName","toMask","personOrPartSegmentation","foreground","background","drawContour","foregroundIds","r","isArray","multiPersonOrPartSegmentation","bytes","Uint8ClampedArray","drawStroke","row","column","radius","color","isSegmentationBoundary","segmentationData","numberBackgroundPixels","n_1","isBoundary","RAINBOW_PART_COLORS","toColoredPartMask","partColors","multiPersonPartSegmentation","partId","CANVAS_NAMES","blurred","blurredMask","lowresPartMask","drawMask","maskImage","maskOpacity","maskBlurAmount","drawPixelatedMask","pixelCellWidth","offscreenCanvas","offscreenCanvasCtx","imageSmoothingEnabled","beginPath","strokeStyle","moveTo","lineTo","stroke","createPersonMask","multiPersonSegmentation","edgeBlurAmount","backgroundMaskImage","backgroundMask","drawBokehEffect","backgroundBlurAmount","blurredImage","personMask","createBodyPartMask","bodyPartIdsToMask","blurBodyPart","bodyPartIdsToBlur","bodyPartMask","PART_CHANNELS","version"],"sources":["D:\\Call site\\video-call-app\\node_modules\\@tensorflow-models\\node_modules\\tslib\\tslib.es6.js","../src/decode_part_map.ts","../src/base_model.ts","../src/mobilenet.ts","../src/keypoints.ts","../src/multi_person/util.ts","../src/multi_person/decode_multiple_masks_cpu.ts","../src/multi_person/decode_multiple_masks_webgl.ts","../src/multi_person/decode_instance_masks.ts","../src/multi_person/max_heap.ts","../src/multi_person/build_part_with_score_queue.ts","../src/multi_person/decode_pose.ts","../src/multi_person/decode_multiple_poses.ts","../src/resnet.ts","../src/saved_models.ts","../src/util.ts","../src/body_pix_model.ts","../src/blur.ts","../src/output_rendering_util.ts","../src/part_channels.ts","../src/version.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","","","","","","","","","","","","","","","","","","","",""],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}